{"version":3,"sources":["webpack:///./src/util/custom-panel/load-custom-panel.ts","webpack:///./src/util/custom-panel/create-custom-panel-element.ts","webpack:///./src/util/custom-panel/set-custom-panel-properties.ts","webpack:///./src/panels/custom/ha-panel-custom.ts","webpack:///./src/common/dom/load_resource.ts"],"names":["JS_CACHE","loadCustomPanel","panelConfig","html_url","toLoad","embed_iframe","push","Promise","all","then","importHrefPromise","js_url","module_url","reject","createCustomPanelElement","tagName","name","document","createElement","setCustomPanelProperties","root","properties","setProperties","Object","keys","forEach","key","navigate","path","replace","registerIframe","initialize","this","panel","hass","narrow","route","_setProperties","disconnectedCallback","_cleanupPanel","updated","changedProps","has","get","_createPanel","props","window","customPanel","undefined","lastChild","removeChild","config","_panel_custom","tempA","href","trust_external","location","hostname","includes","confirm","innerHTML","trim","iframeDoc","querySelector","contentWindow","open","write","customPanelJS","close","element","appendChild","alert","customElements","define","HaPanelCustom","_load","tag","url","type","resolve","attr","parent","onload","onerror","async","rel","loadCSS","loadJS","loadModule"],"mappings":"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","file":"chunk.7c73c0f6b5663bf66763.js","sourcesContent":["import { loadJS, loadModule } from \"../../common/dom/load_resource\";\n\n// Make sure we only import every JS-based panel once (HTML import has this built-in)\nconst JS_CACHE = {};\n\nexport const loadCustomPanel = (panelConfig): Promise<unknown> => {\n  if (panelConfig.html_url) {\n    const toLoad = [\n      import(/* webpackChunkName: \"import-href-polyfill\" */ \"../../resources/html-import/import-href\"),\n    ];\n\n    if (!panelConfig.embed_iframe) {\n      toLoad.push(\n        import(/* webpackChunkName: \"legacy-support\" */ \"../legacy-support\")\n      );\n    }\n\n    return Promise.all(toLoad).then(([{ importHrefPromise }]) =>\n      importHrefPromise(panelConfig.html_url)\n    );\n  }\n  if (panelConfig.js_url) {\n    if (!(panelConfig.js_url in JS_CACHE)) {\n      JS_CACHE[panelConfig.js_url] = loadJS(panelConfig.js_url);\n    }\n    return JS_CACHE[panelConfig.js_url];\n  }\n  if (panelConfig.module_url) {\n    return loadModule(panelConfig.module_url);\n  }\n  return Promise.reject(\"No valid url found in panel config.\");\n};\n","export const createCustomPanelElement = (panelConfig) => {\n  // Legacy support. Custom panels used to have to define element ha-panel-{name}\n  const tagName =\n    \"html_url\" in panelConfig\n      ? `ha-panel-${panelConfig.name}`\n      : panelConfig.name;\n  return document.createElement(tagName);\n};\n","export const setCustomPanelProperties = (root, properties) => {\n  if (\"setProperties\" in root) {\n    root.setProperties(properties);\n  } else {\n    Object.keys(properties).forEach((key) => {\n      root[key] = properties[key];\n    });\n  }\n};\n","import { property, PropertyValues, UpdatingElement } from \"lit-element\";\nimport { loadCustomPanel } from \"../../util/custom-panel/load-custom-panel\";\nimport { createCustomPanelElement } from \"../../util/custom-panel/create-custom-panel-element\";\nimport { setCustomPanelProperties } from \"../../util/custom-panel/set-custom-panel-properties\";\nimport { HomeAssistant, Route } from \"../../types\";\nimport { CustomPanelInfo } from \"../../data/panel_custom\";\nimport { navigate } from \"../../common/navigate\";\n\ndeclare global {\n  interface Window {\n    customPanel: HaPanelCustom | undefined;\n  }\n}\n\nexport class HaPanelCustom extends UpdatingElement {\n  @property() public hass!: HomeAssistant;\n  @property() public narrow!: boolean;\n  @property() public route!: Route;\n  @property() public panel!: CustomPanelInfo;\n  private _setProperties?: (props: {}) => void | undefined;\n\n  // Since navigate fires events on `window`, we need to expose this as a function\n  // to allow custom panels to forward their location changes to the main window\n  // instead of their iframe window.\n  public navigate = (path: string, replace?: boolean) =>\n    navigate(this, path, replace);\n\n  public registerIframe(initialize, setProperties) {\n    initialize(this.panel, {\n      hass: this.hass,\n      narrow: this.narrow,\n      route: this.route,\n    });\n    this._setProperties = setProperties;\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    this._cleanupPanel();\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (changedProps.has(\"panel\")) {\n      // Clean up old things if we had a panel\n      if (changedProps.get(\"panel\")) {\n        this._cleanupPanel();\n      }\n      this._createPanel(this.panel);\n      return;\n    }\n    if (!this._setProperties) {\n      return;\n    }\n    const props = {};\n    // @ts-ignore\n    for (const key of changedProps.keys()) {\n      props[key] = this[key];\n    }\n    this._setProperties(props);\n  }\n\n  private _cleanupPanel() {\n    delete window.customPanel;\n    this._setProperties = undefined;\n    while (this.lastChild) {\n      this.removeChild(this.lastChild);\n    }\n  }\n\n  private _createPanel(panel: CustomPanelInfo) {\n    const config = panel.config!._panel_custom;\n\n    const tempA = document.createElement(\"a\");\n    tempA.href = config.html_url || config.js_url || config.module_url || \"\";\n\n    if (\n      !config.trust_external &&\n      ![\"localhost\", \"127.0.0.1\", location.hostname].includes(tempA.hostname)\n    ) {\n      if (\n        !confirm(`Do you trust the external panel \"${config.name}\" at \"${\n          tempA.href\n        }\"?\n\nIt will have access to all data in Home Assistant.\n\n(Check docs for the panel_custom component to hide this message)`)\n      ) {\n        return;\n      }\n    }\n\n    if (!config.embed_iframe) {\n      loadCustomPanel(config).then(\n        () => {\n          const element = createCustomPanelElement(config);\n          this._setProperties = (props) =>\n            setCustomPanelProperties(element, props);\n          setCustomPanelProperties(element, {\n            panel,\n            hass: this.hass,\n            narrow: this.narrow,\n            route: this.route,\n          });\n          this.appendChild(element);\n        },\n        () => {\n          alert(`Unable to load custom panel from ${tempA.href}`);\n        }\n      );\n      return;\n    }\n\n    window.customPanel = this;\n    this.innerHTML = `\n    <style>\n      iframe {\n        border: 0;\n        width: 100%;\n        height: 100%;\n        display: block;\n      }\n    </style>\n    <iframe></iframe>\n    `.trim();\n    const iframeDoc = this.querySelector(\"iframe\")!.contentWindow!.document;\n    iframeDoc.open();\n    iframeDoc.write(\n      `<!doctype html><script src='${window.customPanelJS}'></script>`\n    );\n    iframeDoc.close();\n  }\n}\n\ncustomElements.define(\"ha-panel-custom\", HaPanelCustom);\n","// Load a resource and get a promise when loading done.\n// From: https://davidwalsh.name/javascript-loader\n\nconst _load = (\n  tag: \"link\" | \"script\" | \"img\",\n  url: string,\n  type?: \"module\"\n) => {\n  // This promise will be used by Promise.all to determine success or failure\n  return new Promise((resolve, reject) => {\n    const element = document.createElement(tag);\n    let attr = \"src\";\n    let parent = \"body\";\n\n    // Important success and error for the promise\n    element.onload = () => resolve(url);\n    element.onerror = () => reject(url);\n\n    // Need to set different attributes depending on tag type\n    switch (tag) {\n      case \"script\":\n        (element as HTMLScriptElement).async = true;\n        if (type) {\n          (element as HTMLScriptElement).type = type;\n        }\n        break;\n      case \"link\":\n        (element as HTMLLinkElement).type = \"text/css\";\n        (element as HTMLLinkElement).rel = \"stylesheet\";\n        attr = \"href\";\n        parent = \"head\";\n    }\n\n    // Inject into document to kick off loading\n    element[attr] = url;\n    document[parent].appendChild(element);\n  });\n};\n\nexport const loadCSS = (url: string) => _load(\"link\", url);\nexport const loadJS = (url: string) => _load(\"script\", url);\nexport const loadImg = (url: string) => _load(\"img\", url);\nexport const loadModule = (url: string) => _load(\"script\", url, \"module\");\n"],"sourceRoot":""}