{"version":3,"sources":["webpack:///./node_modules/@polymer/paper-item/paper-item-body.js","webpack:///./node_modules/@polymer/paper-item/paper-icon-item.js","webpack:///./node_modules/superstruct/lib/index.es.js"],"names":["_template","is","behaviors","StructError","TypeError","attrs","type","path","value","length","join","JSON","stringify","super","format","data","reason","errors","this","push","Error","captureStackTrace","constructor","stack","toString","Object","prototype","kindOf","val","ctorName","Array","isArray","isBuffer","callee","err","message","indexOf","isArguments","Date","toDateString","getDate","setDate","isDate","stackTraceLimit","isError","RegExp","flags","ignoreCase","multiline","global","isRegexp","throw","return","next","isGeneratorObj","call","slice","toLowerCase","replace","name","IS_STRUCT","KIND","isStruct","resolveDefaults","defaults","_extends","assign","target","i","arguments","source","key","hasOwnProperty","Kind","validate","any","schema","defaults$$1","options","tuple","list","func","object","required","endsWith","includes","union","split","intersection","scalar","optional","undefined","en","map","s","e","String","result","isValid","failure","array","element","error","ret","v","r","forEach","singleE","concat","obj","ks","properties","kind","valueKeys","keys","propertiesKeys","Set","types","fn","kinds","k","Math","max","t","Kinds","dict","values","resolved","e2","r2","enum","enums","function","instance","interface","lazy","struct","literal","partial","dynamic","createSchema","Types","superstruct","config","Struct","assert","defineProperty","test","date","isNaN"],"mappings":"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","file":"chunk.80399eeceb69d571e63a.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/paper-styles/typography.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/*\nUse `<paper-item-body>` in a `<paper-item>` or `<paper-icon-item>` to make two-\nor three- line items. It is a flex item that is a vertical flexbox.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n    </paper-item>\n\nThe child elements with the `secondary` attribute is given secondary text\nstyling.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-body-two-line-min-height` | Minimum height of a two-line item | `72px`\n`--paper-item-body-three-line-min-height` | Minimum height of a three-line item | `88px`\n`--paper-item-body-secondary-color` | Foreground color for the `secondary` area | `--secondary-text-color`\n`--paper-item-body-secondary` | Mixin applied to the `secondary` area | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        overflow: hidden; /* needed for text-overflow: ellipsis to work on ff */\n        @apply --layout-vertical;\n        @apply --layout-center-justified;\n        @apply --layout-flex;\n      }\n\n      :host([two-line]) {\n        min-height: var(--paper-item-body-two-line-min-height, 72px);\n      }\n\n      :host([three-line]) {\n        min-height: var(--paper-item-body-three-line-min-height, 88px);\n      }\n\n      :host > ::slotted(*) {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n\n      :host > ::slotted([secondary]) {\n        @apply --paper-font-body1;\n\n        color: var(--paper-item-body-secondary-color, var(--secondary-text-color));\n\n        @apply --paper-item-body-secondary;\n      }\n    </style>\n\n    <slot></slot>\n`,\n\n  is: 'paper-item-body'\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/typography.js';\nimport './paper-item-shared-styles.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperItemBehavior} from './paper-item-behavior.js';\n\n/*\n`<paper-icon-item>` is a convenience element to make an item with icon. It is an\ninteractive list item with a fixed-width icon area, according to Material\nDesign. This is useful if the icons are of varying widths, but you want the item\nbodies to line up. Use this like a `<paper-item>`. The child node with the slot\nname `item-icon` is placed in the icon area.\n\n    <paper-icon-item>\n      <iron-icon icon=\"favorite\" slot=\"item-icon\"></iron-icon>\n      Favorite\n    </paper-icon-item>\n    <paper-icon-item>\n      <div class=\"avatar\" slot=\"item-icon\"></div>\n      Avatar\n    </paper-icon-item>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-icon-width` | Width of the icon area | `56px`\n`--paper-item-icon` | Mixin applied to the icon area | `{}`\n`--paper-icon-item` | Mixin applied to the item | `{}`\n`--paper-item-selected-weight` | The font weight of a selected item | `bold`\n`--paper-item-selected` | Mixin applied to selected paper-items | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items | `--disabled-text-color`\n`--paper-item-disabled` | Mixin applied to disabled paper-items | `{}`\n`--paper-item-focused` | Mixin applied to focused paper-items | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-item-shared-styles\"></style>\n    <style>\n      :host {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        @apply --paper-font-subhead;\n\n        @apply --paper-item;\n        @apply --paper-icon-item;\n      }\n\n      .content-icon {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n\n        width: var(--paper-item-icon-width, 56px);\n        @apply --paper-item-icon;\n      }\n    </style>\n\n    <div id=\"contentIcon\" class=\"content-icon\">\n      <slot name=\"item-icon\"></slot>\n    </div>\n    <slot></slot>\n`,\n\n  is: 'paper-icon-item',\n  behaviors: [PaperItemBehavior]\n});\n","/**\n * Define a struct error.\n *\n * @type {StructError}\n */\n\nclass StructError extends TypeError {\n  static format(attrs) {\n    const { type, path, value } = attrs;\n    const message = `Expected a value of type \\`${type}\\`${path.length ? ` for \\`${path.join('.')}\\`` : ''} but received \\`${JSON.stringify(value)}\\`.`;\n    return message;\n  }\n\n  constructor(attrs) {\n    const message = StructError.format(attrs);\n    super(message);\n\n    const { data, path, value, reason, type, errors = [] } = attrs;\n    this.data = data;\n    this.path = path;\n    this.value = value;\n    this.reason = reason;\n    this.type = type;\n    this.errors = errors;\n\n    if (!errors.length) {\n      errors.push(this);\n    }\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n}\n\nvar toString = Object.prototype.toString;\n\nvar kindOf = function kindOf(val) {\n  if (val === void 0) return 'undefined';\n  if (val === null) return 'null';\n\n  var type = typeof val;\n  if (type === 'boolean') return 'boolean';\n  if (type === 'string') return 'string';\n  if (type === 'number') return 'number';\n  if (type === 'symbol') return 'symbol';\n  if (type === 'function') {\n    return isGeneratorFn(val) ? 'generatorfunction' : 'function';\n  }\n\n  if (isArray(val)) return 'array';\n  if (isBuffer(val)) return 'buffer';\n  if (isArguments(val)) return 'arguments';\n  if (isDate(val)) return 'date';\n  if (isError(val)) return 'error';\n  if (isRegexp(val)) return 'regexp';\n\n  switch (ctorName(val)) {\n    case 'Symbol': return 'symbol';\n    case 'Promise': return 'promise';\n\n    // Set, Map, WeakSet, WeakMap\n    case 'WeakMap': return 'weakmap';\n    case 'WeakSet': return 'weakset';\n    case 'Map': return 'map';\n    case 'Set': return 'set';\n\n    // 8-bit typed arrays\n    case 'Int8Array': return 'int8array';\n    case 'Uint8Array': return 'uint8array';\n    case 'Uint8ClampedArray': return 'uint8clampedarray';\n\n    // 16-bit typed arrays\n    case 'Int16Array': return 'int16array';\n    case 'Uint16Array': return 'uint16array';\n\n    // 32-bit typed arrays\n    case 'Int32Array': return 'int32array';\n    case 'Uint32Array': return 'uint32array';\n    case 'Float32Array': return 'float32array';\n    case 'Float64Array': return 'float64array';\n  }\n\n  if (isGeneratorObj(val)) {\n    return 'generator';\n  }\n\n  // Non-plain objects\n  type = toString.call(val);\n  switch (type) {\n    case '[object Object]': return 'object';\n    // iterators\n    case '[object Map Iterator]': return 'mapiterator';\n    case '[object Set Iterator]': return 'setiterator';\n    case '[object String Iterator]': return 'stringiterator';\n    case '[object Array Iterator]': return 'arrayiterator';\n  }\n\n  // other\n  return type.slice(8, -1).toLowerCase().replace(/\\s/g, '');\n};\n\nfunction ctorName(val) {\n  return val.constructor ? val.constructor.name : null;\n}\n\nfunction isArray(val) {\n  if (Array.isArray) return Array.isArray(val);\n  return val instanceof Array;\n}\n\nfunction isError(val) {\n  return val instanceof Error || (typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number');\n}\n\nfunction isDate(val) {\n  if (val instanceof Date) return true;\n  return typeof val.toDateString === 'function'\n    && typeof val.getDate === 'function'\n    && typeof val.setDate === 'function';\n}\n\nfunction isRegexp(val) {\n  if (val instanceof RegExp) return true;\n  return typeof val.flags === 'string'\n    && typeof val.ignoreCase === 'boolean'\n    && typeof val.multiline === 'boolean'\n    && typeof val.global === 'boolean';\n}\n\nfunction isGeneratorFn(name, val) {\n  return ctorName(name) === 'GeneratorFunction';\n}\n\nfunction isGeneratorObj(val) {\n  return typeof val.throw === 'function'\n    && typeof val.return === 'function'\n    && typeof val.next === 'function';\n}\n\nfunction isArguments(val) {\n  try {\n    if (typeof val.length === 'number' && typeof val.callee === 'function') {\n      return true;\n    }\n  } catch (err) {\n    if (err.message.indexOf('callee') !== -1) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * If you need to support Safari 5-7 (8-10 yr-old browser),\n * take a look at https://github.com/feross/is-buffer\n */\n\nfunction isBuffer(val) {\n  if (val.constructor && typeof val.constructor.isBuffer === 'function') {\n    return val.constructor.isBuffer(val);\n  }\n  return false;\n}\n\n/**\n * A private string to identify structs by.\n *\n * @type {String}\n */\n\nconst IS_STRUCT = '@@__STRUCT__@@';\n\n/**\n * A private string to refer to a struct's kind.\n *\n * @type {String}\n */\n\nconst KIND = '@@__KIND__@@';\n\n/**\n * Check if a `value` is a struct.\n *\n * @param {Any} value\n * @return {Boolean}\n */\n\nfunction isStruct(value) {\n  return !!(value && value[IS_STRUCT]);\n}\n\n/**\n * Resolve `defaults`, for an optional `value`.\n *\n * @param {Function|Any} defaults\n * @param {Any} value\n * @return {Any}\n */\n\nfunction resolveDefaults(defaults, value) {\n  return typeof defaults === 'function' ? defaults(value) : defaults;\n}\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Kind.\n *\n * @type {Kind}\n */\n\nclass Kind {\n  constructor(name, type, validate) {\n    this.name = name;\n    this.type = type;\n    this.validate = validate;\n  }\n}\n\n/**\n * Any.\n *\n * @param {Array|Function|Object|String} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction any(schema, defaults$$1, options) {\n  if (isStruct(schema)) {\n    return schema[KIND];\n  }\n\n  if (schema instanceof Kind) {\n    return schema;\n  }\n\n  switch (kindOf(schema)) {\n    case 'array':\n      {\n        return schema.length > 1 ? tuple(schema, defaults$$1, options) : list(schema, defaults$$1, options);\n      }\n\n    case 'function':\n      {\n        return func(schema, defaults$$1, options);\n      }\n\n    case 'object':\n      {\n        return object(schema, defaults$$1, options);\n      }\n\n    case 'string':\n      {\n        let required = true;\n        let type;\n\n        if (schema.endsWith('?')) {\n          required = false;\n          schema = schema.slice(0, -1);\n        }\n\n        if (schema.includes('|')) {\n          const scalars = schema.split(/\\s*\\|\\s*/g);\n          type = union(scalars, defaults$$1, options);\n        } else if (schema.includes('&')) {\n          const scalars = schema.split(/\\s*&\\s*/g);\n          type = intersection(scalars, defaults$$1, options);\n        } else {\n          type = scalar(schema, defaults$$1, options);\n        }\n\n        if (!required) {\n          type = optional(type, undefined, options);\n        }\n\n        return type;\n      }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    throw new Error(`A schema definition must be an object, array, string or function, but you passed: ${schema}`);\n  } else {\n    throw new Error(`Invalid schema: ${schema}`);\n  }\n}\n\n/**\n * Dict.\n *\n * @param {Array} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction dict(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'array' || schema.length !== 2) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Dict structs must be defined as an array with two elements, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const obj = scalar('object', undefined, options);\n  const keys = any(schema[0], undefined, options);\n  const values = any(schema[1], undefined, options);\n  const name = 'dict';\n  const type = `dict<${keys.type},${values.type}>`;\n  const validate = value => {\n    const resolved = resolveDefaults(defaults$$1);\n    value = resolved ? _extends({}, resolved, value) : value;\n    const [error] = obj.validate(value);\n\n    if (error) {\n      error.type = type;\n      return [error];\n    }\n\n    const ret = {};\n    const errors = [];\n\n    for (let k in value) {\n      const v = value[k];\n      const [e, r] = keys.validate(k);\n\n      if (e) {\n        const allE = e.errors || [e];\n        allE.forEach(singleE => {\n          singleE.path = [k].concat(singleE.path);\n          singleE.data = value;\n          errors.push(singleE);\n        });\n        continue;\n      }\n\n      k = r;\n      const [e2, r2] = values.validate(v);\n\n      if (e2) {\n        const allE2 = e2.errors || [e2];\n        allE2.forEach(singleE => {\n          singleE.path = [k].concat(singleE.path);\n          singleE.data = value;\n          errors.push(singleE);\n        });\n        continue;\n      }\n\n      ret[k] = r2;\n    }\n\n    return errors.length ? [_extends({}, errors[0], { errors })] : [undefined, ret];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Enum.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction en(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Enum structs must be defined as an array, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const name = 'enum';\n  const type = schema.map(s => {\n    try {\n      return JSON.stringify(s);\n    } catch (e) {\n      return String(s);\n    }\n  }).join(' | ');\n\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    return schema.includes(value) ? [undefined, value] : [{ data: value, path: [], value, type }];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Enums.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction enums(schema, defaults$$1, options) {\n  const e = en(schema, undefined, options);\n  const l = list([e], defaults$$1, options);\n  return l;\n}\n\n/**\n * Function.\n *\n * @param {Function} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction func(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Function structs must be defined as a function, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const name = 'function';\n  const type = '<function>';\n  const validate = (value = resolveDefaults(defaults$$1), data) => {\n    const result = schema(value, data);\n    let failure = { path: [], reason: null };\n    let isValid;\n\n    switch (kindOf(result)) {\n      case 'boolean':\n        {\n          isValid = result;\n          break;\n        }\n      case 'string':\n        {\n          isValid = false;\n          failure.reason = result;\n          break;\n        }\n      case 'object':\n        {\n          isValid = false;\n          failure = _extends({}, failure, result);\n          break;\n        }\n      default:\n        {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(`Validator functions must return a boolean, an error reason string or an error reason object, but you passed: ${schema}`);\n          } else {\n            throw new Error(`Invalid result: ${result}`);\n          }\n        }\n    }\n\n    return isValid ? [undefined, value] : [_extends({ type, value, data: value }, failure)];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Instance.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction instance(schema, defaults$$1, options) {\n  const name = 'instance';\n  const type = `instance<${schema.name}>`;\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    return value instanceof schema ? [undefined, value] : [{ data: value, path: [], value, type }];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Interface.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction inter(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Interface structs must be defined as an object, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const obj = scalar('object', undefined, options);\n  const ks = [];\n  const properties = {};\n\n  for (const key in schema) {\n    ks.push(key);\n    const s = schema[key];\n    const kind = any(s, undefined, options);\n    properties[key] = kind;\n  }\n\n  const name = 'interface';\n  const type = `{${ks.join()}}`;\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    const [error] = obj.validate(value);\n\n    if (error) {\n      error.type = type;\n      return [error];\n    }\n\n    const errors = [];\n    const ret = value;\n\n    for (const key in properties) {\n      let v = value[key];\n      const kind = properties[key];\n\n      if (v === undefined) {\n        const d = defaults$$1 && defaults$$1[key];\n        v = resolveDefaults(d, value);\n      }\n\n      const [e, r] = kind.validate(v, value);\n\n      if (e) {\n        const allE = e.errors || [e];\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path);\n          singleE.data = value;\n          errors.push(singleE);\n        });\n        continue;\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r;\n      }\n    }\n\n    return errors.length ? [_extends({}, errors[0], { errors })] : [undefined, ret];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Lazy.\n *\n * @param {Function} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction lazy(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Lazy structs must be defined as an function that returns a schema, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  let kind;\n  let struct;\n  const name = 'lazy';\n  const type = `lazy...`;\n  const compile = value => {\n    struct = schema();\n    kind.name = struct.kind;\n    kind.type = struct.type;\n    kind.validate = struct.validate;\n    return kind.validate(value);\n  };\n\n  kind = new Kind(name, type, compile);\n  return kind;\n}\n\n/**\n * Dynamic.\n *\n * @param {Function} createSchema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction dynamic(createSchema, defaults$$1, options) {\n  if (kindOf(createSchema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Dynamic structs must be defined as a function, but you passed: ${createSchema}`);\n    } else {\n      throw new Error(`Invalid schema: ${createSchema}`);\n    }\n  }\n\n  const name = 'dynamic';\n  const type = 'dynamic...';\n  const validate = (value = resolveDefaults(defaults$$1), data) => {\n    const schema = createSchema(value, data);\n\n    if (kindOf(schema) !== 'function') {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(`Dynamic structs must return a schema, but you passed: ${schema}`);\n      } else {\n        throw new Error(`Invalid schema: ${schema}`);\n      }\n    }\n\n    const [error, result] = schema.validate(value);\n\n    if (error) {\n      return [error];\n    }\n\n    return [undefined, result];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * List.\n *\n * @param {Array} schema\n * @param {Array} defaults\n * @param {Object} options\n */\n\nfunction list(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'array' || schema.length !== 1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`List structs must be defined as an array with a single element, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const array = scalar('array', undefined, options);\n  const element = any(schema[0], undefined, options);\n  const name = 'list';\n  const type = `[${element.type}]`;\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    const [error, result] = array.validate(value);\n\n    if (error) {\n      error.type = type;\n      return [error];\n    }\n\n    value = result;\n    const errors = [];\n    const ret = [];\n\n    for (let i = 0; i < value.length; i++) {\n      const v = value[i];\n      const [e, r] = element.validate(v);\n\n      if (e) {\n        const allE = e.errors || [e];\n        allE.forEach(singleE => {\n          singleE.path = [i].concat(singleE.path);\n          singleE.data = value;\n          errors.push(singleE);\n        });\n        continue;\n      }\n\n      ret[i] = r;\n    }\n\n    return errors.length ? [_extends({}, errors[0], { errors })] : [undefined, ret];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Literal.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction literal(schema, defaults$$1, options) {\n  const name = 'literal';\n  const type = `literal: ${JSON.stringify(schema)}`;\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    return value === schema ? [undefined, value] : [{ data: value, path: [], value, type }];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Object.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction object(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Object structs must be defined as an object, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const obj = scalar('object', undefined, options);\n  const ks = [];\n  const properties = {};\n\n  for (const key in schema) {\n    ks.push(key);\n    const s = schema[key];\n    const kind = any(s, undefined, options);\n    properties[key] = kind;\n  }\n\n  const name = 'object';\n  const type = `{${ks.join()}}`;\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    const [error] = obj.validate(value);\n\n    if (error) {\n      error.type = type;\n      return [error];\n    }\n\n    const errors = [];\n    const ret = {};\n    const valueKeys = Object.keys(value);\n    const propertiesKeys = Object.keys(properties);\n    const keys = new Set(valueKeys.concat(propertiesKeys));\n\n    keys.forEach(key => {\n      let v = value[key];\n      const kind = properties[key];\n\n      if (v === undefined) {\n        const d = defaults$$1 && defaults$$1[key];\n        v = resolveDefaults(d, value);\n      }\n\n      if (!kind) {\n        const e = { data: value, path: [key], value: v };\n        errors.push(e);\n        return;\n      }\n\n      const [e, r] = kind.validate(v, value);\n\n      if (e) {\n        const allE = e.errors || [e];\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path);\n          singleE.data = value;\n          errors.push(singleE);\n        });\n        return;\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r;\n      }\n    });\n\n    return errors.length ? [_extends({}, errors[0], { errors })] : [undefined, ret];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Optional.\n *\n * @param {Any} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction optional(schema, defaults$$1, options) {\n  return union([schema, 'undefined'], defaults$$1, options);\n}\n\n/**\n * Partial.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction partial(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Partial structs must be defined as an object, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const obj = scalar('object', undefined, options);\n  const ks = [];\n  const properties = {};\n\n  for (const key in schema) {\n    ks.push(key);\n    const s = schema[key];\n    const kind = any(s, undefined, options);\n    properties[key] = kind;\n  }\n\n  const name = 'partial';\n  const type = `{${ks.join()},...}`;\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    const [error] = obj.validate(value);\n\n    if (error) {\n      error.type = type;\n      return [error];\n    }\n\n    const errors = [];\n    const ret = {};\n\n    for (const key in properties) {\n      let v = value[key];\n      const kind = properties[key];\n\n      if (v === undefined) {\n        const d = defaults$$1 && defaults$$1[key];\n        v = resolveDefaults(d, value);\n      }\n\n      const [e, r] = kind.validate(v, value);\n\n      if (e) {\n        const allE = e.errors || [e];\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path);\n          singleE.data = value;\n          errors.push(singleE);\n        });\n        continue;\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r;\n      }\n    }\n\n    return errors.length ? [_extends({}, errors[0], { errors })] : [undefined, ret];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Scalar.\n *\n * @param {String} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction scalar(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'string') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Scalar structs must be defined as a string, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const { types } = options;\n  const fn = types[schema];\n\n  if (kindOf(fn) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`No struct validator function found for type \"${schema}\".`);\n    } else {\n      throw new Error(`Invalid type: ${schema}`);\n    }\n  }\n\n  const kind = func(fn, defaults$$1, options);\n  const name = 'scalar';\n  const type = schema;\n  const validate = value => {\n    const [error, result] = kind.validate(value);\n\n    if (error) {\n      error.type = type;\n      return [error];\n    }\n\n    return [undefined, result];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Tuple.\n *\n * @param {Array} schema\n * @param {Array} defaults\n * @param {Object} options\n */\n\nfunction tuple(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Tuple structs must be defined as an array, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const kinds = schema.map(s => any(s, undefined, options));\n  const array = scalar('array', undefined, options);\n  const name = 'tuple';\n  const type = `[${kinds.map(k => k.type).join()}]`;\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    const [error] = array.validate(value);\n\n    if (error) {\n      error.type = type;\n      return [error];\n    }\n\n    const ret = [];\n    const errors = [];\n    const length = Math.max(value.length, kinds.length);\n\n    for (let i = 0; i < length; i++) {\n      const kind = kinds[i];\n      const v = value[i];\n\n      if (!kind) {\n        const e = { data: value, path: [i], value: v };\n        errors.push(e);\n        continue;\n      }\n\n      const [e, r] = kind.validate(v);\n\n      if (e) {\n        const allE = e.errors || [e];\n        allE.forEach(singleE => {\n          singleE.path = [i].concat(singleE.path);\n          singleE.data = value;\n          errors.push(singleE);\n        });\n        continue;\n      }\n\n      ret[i] = r;\n    }\n\n    return errors.length ? [_extends({}, errors[0], { errors })] : [undefined, ret];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Union.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction union(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Union structs must be defined as an array, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const kinds = schema.map(s => any(s, undefined, options));\n  const name = 'union';\n  const type = kinds.map(k => k.type).join(' | ');\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    const errors = [];\n\n    for (const k of kinds) {\n      const [e, r] = k.validate(value);\n\n      if (!e) {\n        return [undefined, r];\n      }\n\n      errors.push(e);\n    }\n    errors[0].type = type;\n    return errors;\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Intersection.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction intersection(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Intersection structs must be defined as an array, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const types = schema.map(s => any(s, undefined, options));\n  const name = 'intersection';\n  const type = types.map(t => t.type).join(' & ');\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    let v = value;\n\n    for (const t of types) {\n      const [e, r] = t.validate(v);\n\n      if (e) {\n        e.type = type;\n        return [e];\n      }\n\n      v = r;\n    }\n\n    return [undefined, v];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Kinds.\n *\n * @type {Object}\n */\n\nconst Kinds = {\n  any,\n  dict,\n  enum: en,\n  enums,\n  function: func,\n  instance,\n  interface: inter,\n  lazy,\n  list,\n  literal,\n  object,\n  optional,\n  partial,\n  scalar,\n  tuple,\n  union,\n  intersection,\n  dynamic\n\n  /**\n   * Export.\n   *\n   * @type {Object}\n   */\n\n};\n\n/**\n * The types that `kind-of` supports.\n *\n * @type {Array}\n */\n\nconst TYPES = ['arguments', 'array', 'boolean', 'buffer', 'error', 'float32array', 'float64array', 'function', 'generatorfunction', 'int16array', 'int32array', 'int8array', 'map', 'null', 'number', 'object', 'promise', 'regexp', 'set', 'string', 'symbol', 'uint16array', 'uint32array', 'uint8array', 'uint8clampedarray', 'undefined', 'weakmap', 'weakset'];\n\n/**\n * The default types that Superstruct ships with.\n *\n * @type {Object}\n */\n\nconst Types = {\n  any: value => value !== undefined\n};\n\nTYPES.forEach(type => {\n  Types[type] = value => kindOf(value) === type;\n});\n\n/**\n * Handle the 'date' case specially, to throw out invalid `Date` objects.\n *\n * @param {Mixed} value\n * @return {Boolean}\n */\n\nTypes.date = value => kindOf(value) === 'date' && !isNaN(value);\n\n/**\n * Create a struct factory with a `config`.\n *\n * @param {Object} config\n * @return {Function}\n */\n\nfunction superstruct(config = {}) {\n  const types = _extends({}, Types, config.types || {});\n\n  /**\n   * Create a `kind` struct with `schema`, `defaults` and `options`.\n   *\n   * @param {Any} schema\n   * @param {Any} defaults\n   * @param {Object} options\n   * @return {Function}\n   */\n\n  function struct(schema, defaults$$1, options = {}) {\n    if (isStruct(schema)) {\n      schema = schema.schema;\n    }\n\n    const kind = Kinds.any(schema, defaults$$1, _extends({}, options, { types }));\n\n    function Struct(data) {\n      if (this instanceof Struct) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error('The `Struct` creation function should not be used with the `new` keyword.');\n        } else {\n          throw new Error('Invalid `new` keyword!');\n        }\n      }\n\n      return Struct.assert(data);\n    }\n\n    Object.defineProperty(Struct, IS_STRUCT, { value: true });\n    Object.defineProperty(Struct, KIND, { value: kind });\n\n    Struct.kind = kind.name;\n    Struct.type = kind.type;\n    Struct.schema = schema;\n    Struct.defaults = defaults$$1;\n    Struct.options = options;\n\n    Struct.assert = value => {\n      const [error, result] = kind.validate(value);\n\n      if (error) {\n        throw new StructError(error);\n      }\n\n      return result;\n    };\n\n    Struct.test = value => {\n      const [error] = kind.validate(value);\n      return !error;\n    };\n\n    Struct.validate = value => {\n      const [error, result] = kind.validate(value);\n\n      if (error) {\n        return [new StructError(error)];\n      }\n\n      return [undefined, result];\n    };\n\n    return Struct;\n  }\n\n  /**\n   * Mix in a factory for each specific kind of struct.\n   */\n\n  Object.keys(Kinds).forEach(name => {\n    const kind = Kinds[name];\n\n    struct[name] = (schema, defaults$$1, options) => {\n      const type = kind(schema, defaults$$1, _extends({}, options, { types }));\n      const s = struct(type, defaults$$1, options);\n      return s;\n    };\n  });\n\n  /**\n   * Return the struct factory.\n   */\n\n  return struct;\n}\n\n/**\n * Create a convenience `struct` factory for the default types.\n *\n * @type {Function}\n */\n\nconst struct = superstruct();\n\nexport { struct, superstruct, isStruct, StructError };\n//# sourceMappingURL=index.es.js.map\n"],"sourceRoot":""}