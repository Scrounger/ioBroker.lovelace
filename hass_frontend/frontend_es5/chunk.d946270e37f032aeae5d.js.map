{"version":3,"sources":["webpack:///./src/components/ha-fab.ts","webpack:///./src/common/search/search-input.ts","webpack:///./mdc-data-table/constants.ts","webpack:///./mdc-data-table/foundation.ts","webpack:///./src/components/ha-checkbox.ts","webpack:///./src/components/ha-data-table.ts","webpack:///./src/panels/lovelace/common/compute-unused-entities.ts","webpack:///./src/panels/lovelace/editor/unused-entities/hui-unused-entities.ts","webpack:///./src/panels/lovelace/editor/select-view/show-select-view-dialog.ts"],"names":["render","classes","this","mini","exited","extended","showLabel","label","disabled","icon","showIconAtEnd","HaFab","customElements","get","filter","_filterInputChanged","_clearSearch","_filterChanged","value","String","e","target","SearchInput","cssClasses","strings","adapter","MDCDataTableFoundation","defaultAdapter","addClassAtRowIndex","getRowCount","getRowElements","getRowIdAtIndex","getRowIndexByChildElement","getSelectedRowCount","isCheckboxAtRowIndexChecked","isHeaderRowCheckboxChecked","isRowsSelectable","notifyRowSelectionChanged","notifySelectedAll","notifyUnselectedAll","registerHeaderRowCheckbox","registerRowCheckboxes","removeClassAtRowIndex","setAttributeAtRowIndex","setHeaderRowCheckboxChecked","setHeaderRowCheckboxIndeterminate","setRowCheckboxCheckedAtIndex","layout","adapter_","setHeaderRowCheckboxState_","layoutAsync","getRows","setSelectedRowIds","rowIds","rowIndex","rowId","isSelected","indexOf","selectRowAtIndex_","getSelectedRowIds","selectedRowIds","push","handleHeaderRowCheckboxChange","isHeaderChecked","handleRowCheckboxChange","event","selected","firstUpdated","style","setProperty","HaCheckbox","columns","data","selectable","id","mdcFoundationClass","_filterable","_headerChecked","_headerIndeterminate","_checkedRows","_filter","_sortDirection","_filterSortData","direction","sortColumn","_memSortData","_memFilterData","ucFilter","toUpperCase","row","Object","entries","some","columnEntry","key","column","filterable","filterKey","includes","sorted","sort","a","b","valA","valB","updated","properties","has","columnId","values","_sortColumn","_handleSearchChange","_handleHeaderRowCheckboxChange","map","Boolean","type","sortable","_handleHeaderClick","title","repeat","_handleRowClick","_handleRowCheckboxChange","template","createAdapter","rowElements","classList","add","length","_getRowIdAtIndex","el","Array","prototype","call","closest","remove","attr","setAttribute","checked","indeterminate","_setRowChecked","getAttribute","ev","undefined","_headerCheckbox","mdcFoundation","checkbox","bubbles","index","splice","detail","HaDataTable","EXCLUDED_DOMAINS","addFromAction","entities","actionConfig","action","service_data","entity_id","entityIds","isArray","entityId","addEntityId","entity","camera_image","tap_action","hold_action","addEntities","obj","forEach","card","cards","elements","badges","badge","computeUnusedEntities","hass","config","usedEntities","Set","views","view","computeUsedEntities","keys","states","split","_unusedEntities","_selectedEntities","_columns","narrow","stateObj","_handleEntityClicked","friendly_name","domain","last_changed","lastChanged","lovelace","changedProperties","_getUnusedEntities","mode","editMode","_handleSelectionChanged","rtl","localize","_selectView","_config","changedSelection","element","selectViewDialogParams","viewSelectedCallback","_addCard","dialogTag","dialogImport","dialogParams","path","HuiUnusedEntities"],"mappings":"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","file":"chunk.d946270e37f032aeae5d.js","sourcesContent":["import {\n  classMap,\n  html,\n  customElement,\n  Constructor,\n} from \"@material/mwc-base/base-element\";\nimport { ripple } from \"@material/mwc-ripple/ripple-directive.js\";\n\nimport \"@material/mwc-fab\";\n// tslint:disable-next-line\nimport { Fab } from \"@material/mwc-fab\";\n// tslint:disable-next-line\nconst MwcFab = customElements.get(\"mwc-fab\") as Constructor<Fab>;\n\n@customElement(\"ha-fab\")\nexport class HaFab extends MwcFab {\n  // We override the render method because we don't have an icon font and mwc-fab doesn't support our svg-icon sets.\n  // Based on version mwc-fab 0.8\n  protected render() {\n    const classes = {\n      \"mdc-fab--mini\": this.mini,\n      \"mdc-fab--exited\": this.exited,\n      \"mdc-fab--extended\": this.extended,\n    };\n    const showLabel = this.label !== \"\" && this.extended;\n    return html`\n      <button\n        .ripple=\"${ripple()}\"\n        class=\"mdc-fab ${classMap(classes)}\"\n        ?disabled=\"${this.disabled}\"\n        aria-label=\"${this.label || this.icon}\"\n      >\n        ${showLabel && this.showIconAtEnd ? this.label : \"\"}\n        ${this.icon\n          ? html`\n              <ha-icon .icon=${this.icon}></ha-icon>\n            `\n          : \"\"}\n        ${showLabel && !this.showIconAtEnd ? this.label : \"\"}\n      </button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","import { TemplateResult, html } from \"lit-html\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  LitElement,\n  property,\n} from \"lit-element\";\nimport { fireEvent } from \"../dom/fire_event\";\nimport \"@polymer/iron-icon/iron-icon\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@material/mwc-button\";\n\n@customElement(\"search-input\")\nclass SearchInput extends LitElement {\n  @property() private filter?: string;\n\n  protected render(): TemplateResult | void {\n    return html`\n      <div class=\"search-container\">\n        <paper-input\n          autofocus\n          label=\"Search\"\n          .value=${this.filter}\n          @value-changed=${this._filterInputChanged}\n        >\n          <iron-icon\n            icon=\"hass:magnify\"\n            slot=\"prefix\"\n            class=\"prefix\"\n          ></iron-icon>\n          ${this.filter &&\n            html`\n              <paper-icon-button\n                slot=\"suffix\"\n                class=\"suffix\"\n                @click=${this._clearSearch}\n                icon=\"hass:close\"\n                alt=\"Clear\"\n                title=\"Clear\"\n              ></paper-icon-button>\n            `}\n        </paper-input>\n      </div>\n    `;\n  }\n\n  private async _filterChanged(value: string) {\n    fireEvent(this, \"value-changed\", { value: String(value) });\n  }\n\n  private async _filterInputChanged(e) {\n    this._filterChanged(e.target.value);\n  }\n\n  private async _clearSearch() {\n    this._filterChanged(\"\");\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-input {\n        flex: 1 1 auto;\n        margin: 0 16px;\n      }\n      .search-container {\n        display: inline-flex;\n        width: 100%;\n        align-items: center;\n      }\n      .prefix {\n        margin: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"search-input\": SearchInput;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nexport const cssClasses = {\n  CELL: \"mdc-data-table__cell\",\n  CELL_NUMERIC: \"mdc-data-table__cell--numeric\",\n  CONTENT: \"mdc-data-table__content\",\n  HEADER_ROW: \"mdc-data-table__header-row\",\n  HEADER_ROW_CHECKBOX: \"mdc-data-table__header-row-checkbox\",\n  ROOT: \"mdc-data-table\",\n  ROW: \"mdc-data-table__row\",\n  ROW_CHECKBOX: \"mdc-data-table__row-checkbox\",\n  ROW_SELECTED: \"mdc-data-table__row--selected\",\n};\n\nexport const strings = {\n  ARIA_SELECTED: \"aria-selected\",\n  DATA_ROW_ID_ATTR: \"data-row-id\",\n  HEADER_ROW_CHECKBOX_SELECTOR: `.${cssClasses.HEADER_ROW_CHECKBOX}`,\n  ROW_CHECKBOX_SELECTOR: `.${cssClasses.ROW_CHECKBOX}`,\n  ROW_SELECTED_SELECTOR: `.${cssClasses.ROW_SELECTED}`,\n  ROW_SELECTOR: `.${cssClasses.ROW}`,\n};\n\nexport const events = {\n  ROW_SELECTION_CHANGED: \"MDCDataTable:rowSelectionChanged\",\n  SELECTED_ALL: \"MDCDataTable:selectedAll\",\n  UNSELECTED_ALL: \"MDCDataTable:unselectedAll\",\n};\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport { MDCFoundation } from \"@material/base/foundation\";\nimport { MDCDataTableAdapter } from \"./adapter\";\nimport { cssClasses, strings } from \"./constants\";\n\nexport class MDCDataTableFoundation extends MDCFoundation<MDCDataTableAdapter> {\n  static get defaultAdapter(): MDCDataTableAdapter {\n    return {\n      addClassAtRowIndex: () => undefined,\n      getRowCount: () => 0,\n      getRowElements: () => [],\n      getRowIdAtIndex: () => \"\",\n      getRowIndexByChildElement: () => 0,\n      getSelectedRowCount: () => 0,\n      isCheckboxAtRowIndexChecked: () => false,\n      isHeaderRowCheckboxChecked: () => false,\n      isRowsSelectable: () => false,\n      notifyRowSelectionChanged: () => undefined,\n      notifySelectedAll: () => undefined,\n      notifyUnselectedAll: () => undefined,\n      registerHeaderRowCheckbox: () => undefined,\n      registerRowCheckboxes: () => undefined,\n      removeClassAtRowIndex: () => undefined,\n      setAttributeAtRowIndex: () => undefined,\n      setHeaderRowCheckboxChecked: () => undefined,\n      setHeaderRowCheckboxIndeterminate: () => undefined,\n      setRowCheckboxCheckedAtIndex: () => undefined,\n    };\n  }\n\n  constructor(adapter?: Partial<MDCDataTableAdapter>) {\n    super({ ...MDCDataTableFoundation.defaultAdapter, ...adapter });\n  }\n\n  /**\n   * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n   * Use this if registering checkbox is synchronous.\n   */\n  layout() {\n    if (this.adapter_.isRowsSelectable()) {\n      this.adapter_.registerHeaderRowCheckbox();\n      this.adapter_.registerRowCheckboxes();\n\n      this.setHeaderRowCheckboxState_();\n    }\n  }\n\n  /**\n   * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n   * Use this if registering checkbox is asynchronous.\n   */\n  async layoutAsync(): Promise<void> {\n    if (this.adapter_.isRowsSelectable()) {\n      await this.adapter_.registerHeaderRowCheckbox();\n      await this.adapter_.registerRowCheckboxes();\n\n      this.setHeaderRowCheckboxState_();\n    }\n  }\n\n  /**\n   * @return Returns array of row elements.\n   */\n  getRows(): Element[] {\n    return this.adapter_.getRowElements();\n  }\n\n  /**\n   * Sets selected row ids. Overwrites previously selected rows.\n   * @param rowIds Array of row ids that needs to be selected.\n   */\n  setSelectedRowIds(rowIds: string[]) {\n    for (let rowIndex = 0; rowIndex < this.adapter_.getRowCount(); rowIndex++) {\n      const rowId = this.adapter_.getRowIdAtIndex(rowIndex);\n\n      let isSelected = false;\n      if (rowId && rowIds.indexOf(rowId) >= 0) {\n        isSelected = true;\n      }\n\n      this.adapter_.setRowCheckboxCheckedAtIndex(rowIndex, isSelected);\n      this.selectRowAtIndex_(rowIndex, isSelected);\n    }\n\n    this.setHeaderRowCheckboxState_();\n  }\n\n  /**\n   * @return Returns array of selected row ids.\n   */\n  getSelectedRowIds(): Array<string | null> {\n    const selectedRowIds: Array<string | null> = [];\n    for (let rowIndex = 0; rowIndex < this.adapter_.getRowCount(); rowIndex++) {\n      if (this.adapter_.isCheckboxAtRowIndexChecked(rowIndex)) {\n        selectedRowIds.push(this.adapter_.getRowIdAtIndex(rowIndex));\n      }\n    }\n\n    return selectedRowIds;\n  }\n\n  /**\n   * Handles header row checkbox change event.\n   */\n  handleHeaderRowCheckboxChange() {\n    const isHeaderChecked = this.adapter_.isHeaderRowCheckboxChecked();\n\n    for (let rowIndex = 0; rowIndex < this.adapter_.getRowCount(); rowIndex++) {\n      this.adapter_.setRowCheckboxCheckedAtIndex(rowIndex, isHeaderChecked);\n      this.selectRowAtIndex_(rowIndex, isHeaderChecked);\n    }\n\n    if (isHeaderChecked) {\n      this.adapter_.notifySelectedAll();\n    } else {\n      this.adapter_.notifyUnselectedAll();\n    }\n  }\n\n  /**\n   * Handles change event originated from row checkboxes.\n   */\n  handleRowCheckboxChange(event: Event) {\n    const rowIndex = this.adapter_.getRowIndexByChildElement(\n      event.target as HTMLInputElement\n    );\n\n    if (rowIndex === -1) {\n      return;\n    }\n\n    const selected = this.adapter_.isCheckboxAtRowIndexChecked(rowIndex);\n\n    this.selectRowAtIndex_(rowIndex, selected);\n    this.setHeaderRowCheckboxState_();\n\n    const rowId = this.adapter_.getRowIdAtIndex(rowIndex);\n    this.adapter_.notifyRowSelectionChanged({ rowId, rowIndex, selected });\n  }\n\n  /**\n   * Updates header row checkbox state based on number of rows selected.\n   */\n  private setHeaderRowCheckboxState_() {\n    if (this.adapter_.getSelectedRowCount() === this.adapter_.getRowCount()) {\n      this.adapter_.setHeaderRowCheckboxChecked(true);\n      this.adapter_.setHeaderRowCheckboxIndeterminate(false);\n    } else if (this.adapter_.getSelectedRowCount() === 0) {\n      this.adapter_.setHeaderRowCheckboxIndeterminate(false);\n      this.adapter_.setHeaderRowCheckboxChecked(false);\n    } else {\n      this.adapter_.setHeaderRowCheckboxIndeterminate(true);\n      this.adapter_.setHeaderRowCheckboxChecked(false);\n    }\n  }\n\n  /**\n   * Sets the attributes of row element based on selection state.\n   */\n  private selectRowAtIndex_(rowIndex: number, selected: boolean) {\n    if (selected) {\n      this.adapter_.addClassAtRowIndex(rowIndex, cssClasses.ROW_SELECTED);\n      this.adapter_.setAttributeAtRowIndex(\n        rowIndex,\n        strings.ARIA_SELECTED,\n        \"true\"\n      );\n    } else {\n      this.adapter_.removeClassAtRowIndex(rowIndex, cssClasses.ROW_SELECTED);\n      this.adapter_.setAttributeAtRowIndex(\n        rowIndex,\n        strings.ARIA_SELECTED,\n        \"false\"\n      );\n    }\n  }\n}\n","import { Constructor, customElement, CSSResult, css } from \"lit-element\";\nimport \"@material/mwc-checkbox\";\n// tslint:disable-next-line\nimport { Checkbox } from \"@material/mwc-checkbox\";\nimport { style } from \"@material/mwc-checkbox/mwc-checkbox-css\";\n// tslint:disable-next-line\nconst MwcCheckbox = customElements.get(\"mwc-checkbox\") as Constructor<Checkbox>;\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends MwcCheckbox {\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\"--mdc-theme-secondary\", \"var(--primary-color)\");\n  }\n\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        .mdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate)\n          ~ .mdc-checkbox__background {\n          border-color: rgba(var(--rgb-primary-text-color), 0.54);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","import { repeat } from \"lit-html/directives/repeat\";\n\nimport {\n  MDCDataTableAdapter,\n  MDCDataTableFoundation,\n} from \"../../mdc-data-table/index\"; // Because mdc-data-table published ts files, temporary load them from own repo, outside src so our linters won't complain\n\nimport {\n  BaseElement,\n  html,\n  query,\n  queryAll,\n  CSSResult,\n  css,\n  customElement,\n  property,\n  classMap,\n  TemplateResult,\n  PropertyValues,\n} from \"@material/mwc-base/base-element\";\n\nimport memoizeOne from \"memoize-one\";\n\nimport \"./ha-icon\";\nimport \"../common/search/search-input\";\nimport \"./ha-checkbox\";\n// tslint:disable-next-line\nimport { HaCheckbox } from \"./ha-checkbox\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"selection-changed\": SelectionChangedEvent;\n    \"row-click\": RowClickedEvent;\n    \"sorting-changed\": SortingChangedEvent;\n  }\n}\n\nexport interface RowClickedEvent {\n  id: string;\n}\n\nexport interface SelectionChangedEvent {\n  id: string;\n  selected: boolean;\n}\n\nexport interface SortingChangedEvent {\n  column: string;\n  direction: SortingDirection;\n}\n\nexport type SortingDirection = \"desc\" | \"asc\" | null;\n\nexport interface DataTabelColumnContainer {\n  [key: string]: DataTabelColumnData;\n}\n\nexport interface DataTabelColumnData {\n  title: string;\n  type?: \"numeric\";\n  sortable?: boolean;\n  filterable?: boolean;\n  filterKey?: string;\n  direction?: SortingDirection;\n  template?: (data: any) => TemplateResult;\n}\n\nexport interface DataTabelRowData {\n  [key: string]: any;\n}\n\n@customElement(\"ha-data-table\")\nexport class HaDataTable extends BaseElement {\n  @property({ type: Object }) public columns: DataTabelColumnContainer = {};\n  @property({ type: Array }) public data: DataTabelRowData[] = [];\n  @property({ type: Boolean }) public selectable = false;\n  @property({ type: String }) public id = \"id\";\n  protected mdcFoundation!: MDCDataTableFoundation;\n  protected readonly mdcFoundationClass = MDCDataTableFoundation;\n  @query(\".mdc-data-table\") protected mdcRoot!: HTMLElement;\n  @queryAll(\".mdc-data-table__row\") protected rowElements!: HTMLElement[];\n  @query(\"#header-checkbox\") private _headerCheckbox!: HaCheckbox;\n  @property({ type: Boolean }) private _filterable = false;\n  @property({ type: Boolean }) private _headerChecked = false;\n  @property({ type: Boolean }) private _headerIndeterminate = false;\n  @property({ type: Array }) private _checkedRows: string[] = [];\n  @property({ type: String }) private _filter = \"\";\n  @property({ type: String }) private _sortColumn?: string;\n  @property({ type: String }) private _sortDirection: SortingDirection = null;\n\n  private _filterSortData = memoizeOne(\n    (\n      data: DataTabelRowData[],\n      columns: DataTabelColumnContainer,\n      filter: string,\n      direction: SortingDirection,\n      sortColumn?: string\n    ) =>\n      sortColumn\n        ? this._memSortData(\n            this._memFilterData(data, columns, filter),\n            columns,\n            direction,\n            sortColumn\n          )\n        : this._memFilterData(data, columns, filter)\n  );\n\n  private _memFilterData = memoizeOne(\n    (\n      data: DataTabelRowData[],\n      columns: DataTabelColumnContainer,\n      filter: string\n    ) => {\n      if (!filter) {\n        return data;\n      }\n      const ucFilter = filter.toUpperCase();\n      return data.filter((row) => {\n        return Object.entries(columns).some((columnEntry) => {\n          const [key, column] = columnEntry;\n          if (column.filterable) {\n            if (\n              (column.filterKey ? row[key][column.filterKey] : row[key])\n                .toUpperCase()\n                .includes(ucFilter)\n            ) {\n              return true;\n            }\n          }\n          return false;\n        });\n      });\n    }\n  );\n\n  private _memSortData = memoizeOne(\n    (\n      data: DataTabelRowData[],\n      columns: DataTabelColumnContainer,\n      direction: SortingDirection,\n      sortColumn: string\n    ) => {\n      const sorted = [...data];\n      const column = columns[sortColumn];\n      return sorted.sort((a, b) => {\n        let sort = 1;\n        if (direction === \"desc\") {\n          sort = -1;\n        }\n\n        let valA = column.filterKey\n          ? a[sortColumn][column.filterKey]\n          : a[sortColumn];\n\n        let valB = column.filterKey\n          ? b[sortColumn][column.filterKey]\n          : b[sortColumn];\n\n        if (typeof valA === \"string\") {\n          valA = valA.toUpperCase();\n        }\n        if (typeof valB === \"string\") {\n          valB = valB.toUpperCase();\n        }\n\n        if (valA < valB) {\n          return sort * -1;\n        }\n        if (valA > valB) {\n          return sort * 1;\n        }\n        return 0;\n      });\n    }\n  );\n\n  protected updated(properties: PropertyValues) {\n    super.updated(properties);\n\n    if (properties.has(\"columns\")) {\n      this._filterable = Object.values(this.columns).some(\n        (column) => column.filterable\n      );\n\n      for (const columnId in this.columns) {\n        if (this.columns[columnId].direction) {\n          this._sortDirection = this.columns[columnId].direction!;\n          this._sortColumn = columnId;\n          break;\n        }\n      }\n    }\n  }\n\n  protected render() {\n    return html`\n      ${this._filterable\n        ? html`\n            <search-input\n              @value-changed=${this._handleSearchChange}\n            ></search-input>\n          `\n        : \"\"}\n      <div class=\"mdc-data-table\">\n        <table class=\"mdc-data-table__table\">\n          <thead>\n            <tr class=\"mdc-data-table__header-row\">\n              ${this.selectable\n                ? html`\n                    <th\n                      class=\"mdc-data-table__header-cell mdc-data-table__header-cell--checkbox\"\n                      role=\"columnheader\"\n                      scope=\"col\"\n                    >\n                      <ha-checkbox\n                        id=\"header-checkbox\"\n                        class=\"mdc-data-table__row-checkbox\"\n                        @change=${this._handleHeaderRowCheckboxChange}\n                        .indeterminate=${this._headerIndeterminate}\n                        .checked=${this._headerChecked}\n                      >\n                      </ha-checkbox>\n                    </th>\n                  `\n                : \"\"}\n              ${Object.entries(this.columns).map((columnEntry) => {\n                const [key, column] = columnEntry;\n                const sorted = key === this._sortColumn;\n                const classes = {\n                  \"mdc-data-table__cell--numeric\": Boolean(\n                    column.type && column.type === \"numeric\"\n                  ),\n                  sortable: Boolean(column.sortable),\n                  \"not-sorted\": Boolean(column.sortable && !sorted),\n                };\n                return html`\n                  <th\n                    class=\"mdc-data-table__header-cell ${classMap(classes)}\"\n                    role=\"columnheader\"\n                    scope=\"col\"\n                    @click=${this._handleHeaderClick}\n                    data-column-id=\"${key}\"\n                  >\n                    ${column.sortable\n                      ? html`\n                          <ha-icon\n                            .icon=${sorted && this._sortDirection === \"desc\"\n                              ? \"hass:arrow-down\"\n                              : \"hass:arrow-up\"}\n                          ></ha-icon>\n                        `\n                      : \"\"}\n                    <span>${column.title}</span>\n                  </th>\n                `;\n              })}\n            </tr>\n          </thead>\n          <tbody class=\"mdc-data-table__content\">\n            ${repeat(\n              this._filterSortData(\n                this.data,\n                this.columns,\n                this._filter,\n                this._sortDirection,\n                this._sortColumn\n              ),\n              (row: DataTabelRowData) => row[this.id],\n              (row: DataTabelRowData) => html`\n                <tr\n                  data-row-id=\"${row[this.id]}\"\n                  @click=${this._handleRowClick}\n                  class=\"mdc-data-table__row\"\n                >\n                  ${this.selectable\n                    ? html`\n                        <td\n                          class=\"mdc-data-table__cell mdc-data-table__cell--checkbox\"\n                        >\n                          <ha-checkbox\n                            class=\"mdc-data-table__row-checkbox\"\n                            @change=${this._handleRowCheckboxChange}\n                            .checked=${this._checkedRows.includes(row[this.id])}\n                          >\n                          </ha-checkbox>\n                        </td>\n                      `\n                    : \"\"}\n                  ${Object.entries(this.columns).map((columnEntry) => {\n                    const [key, column] = columnEntry;\n                    return html`\n                      <td\n                        class=\"mdc-data-table__cell ${classMap({\n                          \"mdc-data-table__cell--numeric\": Boolean(\n                            column.type && column.type === \"numeric\"\n                          ),\n                        })}\"\n                      >\n                        ${column.template\n                          ? column.template(row[key])\n                          : row[key]}\n                      </td>\n                    `;\n                  })}\n                </tr>\n              `\n            )}\n          </tbody>\n        </table>\n      </div>\n    `;\n  }\n\n  protected createAdapter(): MDCDataTableAdapter {\n    return {\n      addClassAtRowIndex: (rowIndex: number, cssClasses: string) => {\n        this.rowElements[rowIndex].classList.add(cssClasses);\n      },\n      getRowCount: () => this.data.length,\n      getRowElements: () => this.rowElements,\n      getRowIdAtIndex: (rowIndex: number) => this._getRowIdAtIndex(rowIndex),\n      getRowIndexByChildElement: (el: Element) =>\n        Array.prototype.indexOf.call(this.rowElements, el.closest(\"tr\")),\n      getSelectedRowCount: () => this._checkedRows.length,\n      isCheckboxAtRowIndexChecked: (rowIndex: number) =>\n        this._checkedRows.includes(this._getRowIdAtIndex(rowIndex)),\n      isHeaderRowCheckboxChecked: () => this._headerChecked,\n      isRowsSelectable: () => true,\n      notifyRowSelectionChanged: () => undefined,\n      notifySelectedAll: () => undefined,\n      notifyUnselectedAll: () => undefined,\n      registerHeaderRowCheckbox: () => undefined,\n      registerRowCheckboxes: () => undefined,\n      removeClassAtRowIndex: (rowIndex: number, cssClasses: string) => {\n        this.rowElements[rowIndex].classList.remove(cssClasses);\n      },\n      setAttributeAtRowIndex: (\n        rowIndex: number,\n        attr: string,\n        value: string\n      ) => {\n        this.rowElements[rowIndex].setAttribute(attr, value);\n      },\n      setHeaderRowCheckboxChecked: (checked: boolean) => {\n        this._headerChecked = checked;\n      },\n      setHeaderRowCheckboxIndeterminate: (indeterminate: boolean) => {\n        this._headerIndeterminate = indeterminate;\n      },\n      setRowCheckboxCheckedAtIndex: (rowIndex: number, checked: boolean) => {\n        this._setRowChecked(this._getRowIdAtIndex(rowIndex), checked);\n      },\n    };\n  }\n\n  private _getRowIdAtIndex(rowIndex: number): string {\n    return this.rowElements[rowIndex].getAttribute(\"data-row-id\")!;\n  }\n\n  private _handleHeaderClick(ev: Event) {\n    const columnId = (ev.target as HTMLElement)\n      .closest(\"th\")!\n      .getAttribute(\"data-column-id\")!;\n    if (!this.columns[columnId].sortable) {\n      return;\n    }\n    if (!this._sortDirection || this._sortColumn !== columnId) {\n      this._sortDirection = \"asc\";\n    } else if (this._sortDirection === \"asc\") {\n      this._sortDirection = \"desc\";\n    } else {\n      this._sortDirection = null;\n    }\n\n    this._sortColumn = this._sortDirection === null ? undefined : columnId;\n\n    fireEvent(this, \"sorting-changed\", {\n      column: columnId,\n      direction: this._sortDirection,\n    });\n  }\n\n  private _handleHeaderRowCheckboxChange() {\n    this._headerChecked = this._headerCheckbox.checked;\n    this._headerIndeterminate = this._headerCheckbox.indeterminate;\n    this.mdcFoundation.handleHeaderRowCheckboxChange();\n  }\n\n  private _handleRowCheckboxChange(ev: Event) {\n    const checkbox = ev.target as HaCheckbox;\n    const rowId = checkbox.closest(\"tr\")!.getAttribute(\"data-row-id\");\n\n    this._setRowChecked(rowId!, checkbox.checked);\n    this.mdcFoundation.handleRowCheckboxChange(ev);\n  }\n\n  private _handleRowClick(ev: Event) {\n    const rowId = (ev.target as HTMLElement)\n      .closest(\"tr\")!\n      .getAttribute(\"data-row-id\")!;\n    fireEvent(this, \"row-click\", { id: rowId }, { bubbles: false });\n  }\n\n  private _setRowChecked(rowId: string, checked: boolean) {\n    if (checked && !this._checkedRows.includes(rowId)) {\n      this._checkedRows = [...this._checkedRows, rowId];\n    } else if (!checked) {\n      const index = this._checkedRows.indexOf(rowId);\n      if (index !== -1) {\n        this._checkedRows.splice(index, 1);\n      }\n    }\n    fireEvent(this, \"selection-changed\", {\n      id: rowId,\n      selected: checked,\n    });\n  }\n\n  private _handleSearchChange(ev: CustomEvent): void {\n    this._filter = ev.detail.value;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      /* default mdc styles, colors changed, without checkbox styles */\n\n      .mdc-data-table__content {\n        font-family: Roboto, sans-serif;\n        -moz-osx-font-smoothing: grayscale;\n        -webkit-font-smoothing: antialiased;\n        font-size: 0.875rem;\n        line-height: 1.25rem;\n        font-weight: 400;\n        letter-spacing: 0.0178571429em;\n        text-decoration: inherit;\n        text-transform: inherit;\n      }\n\n      .mdc-data-table {\n        background-color: var(--card-background-color);\n        border-radius: 4px;\n        border-width: 1px;\n        border-style: solid;\n        border-color: rgba(var(--rgb-primary-text-color), 0.12);\n        display: inline-flex;\n        flex-direction: column;\n        box-sizing: border-box;\n        overflow-x: auto;\n      }\n\n      .mdc-data-table__row--selected {\n        background-color: rgba(var(--rgb-primary-color), 0.04);\n      }\n\n      .mdc-data-table__row {\n        border-top-color: rgba(var(--rgb-primary-text-color), 0.12);\n      }\n\n      .mdc-data-table__row {\n        border-top-width: 1px;\n        border-top-style: solid;\n      }\n\n      .mdc-data-table__row:not(.mdc-data-table__row--selected):hover {\n        background-color: rgba(var(--rgb-primary-text-color), 0.04);\n      }\n\n      .mdc-data-table__header-cell {\n        color: var(--primary-text-color);\n      }\n\n      .mdc-data-table__cell {\n        color: var(--primary-text-color);\n      }\n\n      .mdc-data-table__header-row {\n        height: 56px;\n      }\n\n      .mdc-data-table__row {\n        height: 52px;\n      }\n\n      .mdc-data-table__cell,\n      .mdc-data-table__header-cell {\n        padding-right: 16px;\n        padding-left: 16px;\n      }\n\n      .mdc-data-table__header-cell--checkbox,\n      .mdc-data-table__cell--checkbox {\n        /* @noflip */\n        padding-left: 16px;\n        /* @noflip */\n        padding-right: 0;\n      }\n      [dir=\"rtl\"] .mdc-data-table__header-cell--checkbox,\n      .mdc-data-table__header-cell--checkbox[dir=\"rtl\"],\n      [dir=\"rtl\"] .mdc-data-table__cell--checkbox,\n      .mdc-data-table__cell--checkbox[dir=\"rtl\"] {\n        /* @noflip */\n        padding-left: 0;\n        /* @noflip */\n        padding-right: 16px;\n      }\n\n      .mdc-data-table__table {\n        width: 100%;\n        border: 0;\n        white-space: nowrap;\n        border-collapse: collapse;\n      }\n\n      .mdc-data-table__cell {\n        font-family: Roboto, sans-serif;\n        -moz-osx-font-smoothing: grayscale;\n        -webkit-font-smoothing: antialiased;\n        font-size: 0.875rem;\n        line-height: 1.25rem;\n        font-weight: 400;\n        letter-spacing: 0.0178571429em;\n        text-decoration: inherit;\n        text-transform: inherit;\n      }\n\n      .mdc-data-table__cell--numeric {\n        text-align: right;\n      }\n      [dir=\"rtl\"] .mdc-data-table__cell--numeric,\n      .mdc-data-table__cell--numeric[dir=\"rtl\"] {\n        /* @noflip */\n        text-align: left;\n      }\n\n      .mdc-data-table__header-cell {\n        font-family: Roboto, sans-serif;\n        -moz-osx-font-smoothing: grayscale;\n        -webkit-font-smoothing: antialiased;\n        font-size: 0.875rem;\n        line-height: 1.375rem;\n        font-weight: 500;\n        letter-spacing: 0.0071428571em;\n        text-decoration: inherit;\n        text-transform: inherit;\n        text-align: left;\n      }\n      [dir=\"rtl\"] .mdc-data-table__header-cell,\n      .mdc-data-table__header-cell[dir=\"rtl\"] {\n        /* @noflip */\n        text-align: right;\n      }\n\n      .mdc-data-table__header-cell--numeric {\n        text-align: right;\n      }\n      [dir=\"rtl\"] .mdc-data-table__header-cell--numeric,\n      .mdc-data-table__header-cell--numeric[dir=\"rtl\"] {\n        /* @noflip */\n        text-align: left;\n      }\n\n      /* custom from here */\n\n      .mdc-data-table {\n        display: block;\n      }\n      .mdc-data-table__header-cell {\n        overflow: hidden;\n      }\n      .mdc-data-table__header-cell.sortable {\n        cursor: pointer;\n      }\n      .mdc-data-table__header-cell.not-sorted:not(.mdc-data-table__cell--numeric)\n        span {\n        position: relative;\n        left: -24px;\n      }\n      .mdc-data-table__header-cell.not-sorted > * {\n        transition: left 0.2s ease 0s;\n      }\n      .mdc-data-table__header-cell.not-sorted ha-icon {\n        left: -36px;\n      }\n      .mdc-data-table__header-cell.not-sorted:not(.mdc-data-table__cell--numeric):hover\n        span {\n        left: 0px;\n      }\n      .mdc-data-table__header-cell:hover.not-sorted ha-icon {\n        left: 0px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-data-table\": HaDataTable;\n  }\n}\n","import { LovelaceConfig, ActionConfig } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\n\nconst EXCLUDED_DOMAINS = [\"zone\"];\n\nconst addFromAction = (entities: Set<string>, actionConfig: ActionConfig) => {\n  if (\n    actionConfig.action !== \"call-service\" ||\n    !actionConfig.service_data ||\n    !actionConfig.service_data.entity_id\n  ) {\n    return;\n  }\n  let entityIds = actionConfig.service_data.entity_id;\n  if (!Array.isArray(entityIds)) {\n    entityIds = [entityIds];\n  }\n  for (const entityId of entityIds) {\n    entities.add(entityId);\n  }\n};\n\nconst addEntityId = (entities: Set<string>, entity) => {\n  if (typeof entity === \"string\") {\n    entities.add(entity);\n    return;\n  }\n\n  if (entity.entity) {\n    entities.add(entity.entity);\n  }\n  if (entity.camera_image) {\n    entities.add(entity.camera_image);\n  }\n  if (entity.tap_action) {\n    addFromAction(entities, entity.tap_action);\n  }\n  if (entity.hold_action) {\n    addFromAction(entities, entity.hold_action);\n  }\n};\n\nconst addEntities = (entities: Set<string>, obj) => {\n  if (obj.entity) {\n    addEntityId(entities, obj.entity);\n  }\n  if (obj.entities) {\n    obj.entities.forEach((entity) => addEntityId(entities, entity));\n  }\n  if (obj.card) {\n    addEntities(entities, obj.card);\n  }\n  if (obj.cards) {\n    obj.cards.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.elements) {\n    obj.elements.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.badges) {\n    obj.badges.forEach((badge) => addEntityId(entities, badge));\n  }\n};\n\nconst computeUsedEntities = (config) => {\n  const entities = new Set<string>();\n  config.views.forEach((view) => addEntities(entities, view));\n  return entities;\n};\n\nexport const computeUnusedEntities = (\n  hass: HomeAssistant,\n  config: LovelaceConfig\n): string[] => {\n  const usedEntities = computeUsedEntities(config);\n  return Object.keys(hass.states)\n    .filter(\n      (entity) =>\n        !usedEntities.has(entity) &&\n        !EXCLUDED_DOMAINS.includes(entity.split(\".\", 1)[0])\n    )\n    .sort();\n};\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  PropertyValues,\n  property,\n  customElement,\n  css,\n  CSSResult,\n} from \"lit-element\";\n\nimport { classMap } from \"lit-html/directives/class-map\";\n\nimport memoizeOne from \"memoize-one\";\n\nimport \"../../../../components/ha-fab\";\nimport \"../../../../components/entity/state-badge\";\nimport \"../../../../components/ha-relative-time\";\nimport \"../../../../components/ha-icon\";\n\nimport \"../../../../components/ha-data-table\";\n// tslint:disable-next-line\nimport {\n  SelectionChangedEvent,\n  DataTabelColumnContainer,\n} from \"../../../../components/ha-data-table\";\n\nimport computeStateName from \"../../../../common/entity/compute_state_name\";\nimport computeDomain from \"../../../../common/entity/compute_domain\";\n\nimport { computeRTL } from \"../../../../common/util/compute_rtl\";\nimport { computeUnusedEntities } from \"../../common/compute-unused-entities\";\nimport { showSelectViewDialog } from \"../select-view/show-select-view-dialog\";\nimport { showEditCardDialog } from \"../card-editor/show-edit-card-dialog\";\n\nimport { HomeAssistant } from \"../../../../types\";\nimport { Lovelace } from \"../../types\";\nimport { LovelaceConfig } from \"../../../../data/lovelace\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\n\n@customElement(\"hui-unused-entities\")\nexport class HuiUnusedEntities extends LitElement {\n  @property() public lovelace?: Lovelace;\n\n  @property() public hass?: HomeAssistant;\n\n  @property() public narrow?: boolean;\n\n  @property() private _unusedEntities: string[] = [];\n\n  private _selectedEntities: string[] = [];\n\n  private get _config(): LovelaceConfig {\n    return this.lovelace!.config;\n  }\n\n  private _columns = memoizeOne((narrow: boolean) => {\n    const columns: DataTabelColumnContainer = {\n      entity: {\n        title: \"Entity\",\n        sortable: true,\n        filterable: true,\n        filterKey: \"friendly_name\",\n        direction: \"asc\",\n        template: (stateObj) => html`\n          <div @click=${this._handleEntityClicked} style=\"cursor: pointer;\">\n            <state-badge\n              .hass=${this.hass!}\n              .stateObj=${stateObj}\n            ></state-badge>\n            ${stateObj.friendly_name}\n          </div>\n        `,\n      },\n    };\n\n    if (narrow) {\n      return columns;\n    }\n\n    columns.entity_id = {\n      title: \"Entity id\",\n      sortable: true,\n      filterable: true,\n    };\n    columns.domain = {\n      title: \"Domain\",\n      sortable: true,\n      filterable: true,\n    };\n    columns.last_changed = {\n      title: \"Last Changed\",\n      type: \"numeric\",\n      sortable: true,\n      template: (lastChanged: string) => html`\n        <ha-relative-time\n          .hass=${this.hass!}\n          .datetime=${lastChanged}\n        ></ha-relative-time>\n      `,\n    };\n\n    return columns;\n  });\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.updated(changedProperties);\n\n    if (changedProperties.has(\"lovelace\")) {\n      this._getUnusedEntities();\n    }\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.lovelace) {\n      return html``;\n    }\n\n    if (this.lovelace.mode === \"storage\" && this.lovelace.editMode === false) {\n      return html``;\n    }\n\n    return html`\n      <ha-card header=\"Unused entities\">\n        <div class=\"card-content\">\n          These are the entities that you have available, but are not in your\n          Lovelace UI yet.\n          ${this.lovelace.mode === \"storage\"\n            ? html`\n                <br />Select the entities you want to add to a card and then\n                click the add card button.\n              `\n            : \"\"}\n        </div>\n      </ha-card>\n      <ha-data-table\n        .columns=${this._columns(this.narrow!)}\n        .data=${this._unusedEntities.map((entity) => {\n          const stateObj = this.hass!.states[entity];\n          return {\n            entity_id: entity,\n            entity: {\n              ...stateObj,\n              friendly_name: computeStateName(stateObj),\n            },\n            domain: computeDomain(entity),\n            last_changed: stateObj!.last_changed,\n          };\n        })}\n        .id=${\"entity_id\"}\n        .selectable=${this.lovelace!.mode === \"storage\"}\n        @selection-changed=${this._handleSelectionChanged}\n      ></ha-data-table>\n      ${this.lovelace.mode === \"storage\"\n        ? html`\n            <ha-fab\n              class=\"${classMap({\n                rtl: computeRTL(this.hass),\n              })}\"\n              icon=\"hass:plus\"\n              label=\"${this.hass.localize(\n                \"ui.panel.lovelace.editor.edit_card.add\"\n              )}\"\n              @click=\"${this._selectView}\"\n            ></ha-fab>\n          `\n        : \"\"}\n    `;\n  }\n\n  private _getUnusedEntities(): void {\n    if (!this.hass || !this.lovelace) {\n      return;\n    }\n    this._selectedEntities = [];\n    this._unusedEntities = computeUnusedEntities(this.hass, this._config!);\n  }\n\n  private _handleSelectionChanged(ev: CustomEvent): void {\n    const changedSelection = ev.detail as SelectionChangedEvent;\n    const entity = changedSelection.id;\n    if (changedSelection.selected) {\n      this._selectedEntities.push(entity);\n    } else {\n      const index = this._selectedEntities.indexOf(entity);\n      if (index !== -1) {\n        this._selectedEntities.splice(index, 1);\n      }\n    }\n  }\n\n  private _handleEntityClicked(ev: Event) {\n    const entityId = (ev.target as HTMLElement)\n      .closest(\"tr\")!\n      .getAttribute(\"data-row-id\")!;\n    fireEvent(this, \"hass-more-info\", {\n      entityId,\n    });\n  }\n\n  private _selectView(): void {\n    showSelectViewDialog(this, {\n      lovelace: this.lovelace!,\n      viewSelectedCallback: (view) => this._addCard(view),\n    });\n  }\n\n  private _addCard(view: number): void {\n    showEditCardDialog(this, {\n      lovelace: this.lovelace!,\n      path: [view],\n      entities: this._selectedEntities,\n    });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        background: var(--lovelace-background);\n        padding: 16px;\n      }\n      ha-fab {\n        position: sticky;\n        float: right;\n        bottom: 16px;\n        z-index: 1;\n      }\n      ha-fab.rtl {\n        float: left;\n      }\n      ha-card {\n        margin-bottom: 16px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-unused-entities\": HuiUnusedEntities;\n  }\n}\n","import { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { Lovelace } from \"../../types\";\n\nexport interface SelectViewDialogParams {\n  lovelace: Lovelace;\n  viewSelectedCallback: (view: number) => void;\n}\n\nexport const showSelectViewDialog = (\n  element: HTMLElement,\n  selectViewDialogParams: SelectViewDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"hui-dialog-select-view\",\n    dialogImport: () =>\n      import(/* webpackChunkName: \"hui-dialog-select-view\" */ \"./hui-dialog-select-view\"),\n    dialogParams: selectViewDialogParams,\n  });\n};\n"],"sourceRoot":""}