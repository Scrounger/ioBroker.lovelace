{"version":3,"sources":["webpack:///./node_modules/@polymer/iron-input/iron-input.js","webpack:///./node_modules/@polymer/paper-item/paper-item-behavior.js","webpack:///./node_modules/@polymer/paper-item/paper-item.js","webpack:///./node_modules/@polymer/paper-item/paper-item-shared-styles.js","webpack:///./node_modules/@polymer/paper-item/paper-item-body.js","webpack:///./node_modules/@polymer/paper-item/paper-icon-item.js","webpack:///./node_modules/@polymer/iron-autogrow-textarea/iron-autogrow-textarea.js","webpack:///./node_modules/@polymer/paper-input/paper-textarea.js","webpack:///./node_modules/@polymer/app-storage/app-storage-behavior.js","webpack:///./node_modules/@polymer/paper-input/paper-input.js","webpack:///./node_modules/@polymer/iron-a11y-announcer/iron-a11y-announcer.js"],"names":["_template","is","behaviors","properties","bindValue","type","String","value","computed","allowedPattern","autoValidate","Boolean","_inputElement","Object","observers","listeners","created","requestAvailability","this","_previousValidInput","_patternAlreadyChecked","attached","_observer","observeNodes","info","_initSlottedInput","bind","detached","unobserveNodes","getEffectiveChildren","inputElement","fire","pattern","RegExp","_bindValueChanged","undefined","validate","_onInput","_checkPatternValidity","_announceInvalidCharacter","_isPrintable","event","anyNonPrintable","keyCode","mozNonPrintable","charCode","_onKeypress","regexp","_patternRegExp","metaKey","ctrlKey","altKey","thisChar","fromCharCode","test","preventDefault","i","length","invalid","valid","checkValidity","required","hasValidator","call","message","text","_computeValue","PaperItemBehavior","hostAttributes","role","tabindex","$_documentContainer","document","createElement","setAttribute","innerHTML","head","appendChild","content","observer","notify","rows","Number","maxRows","autocomplete","autofocus","inputmode","placeholder","readonly","minlength","maxlength","label","$","textarea","selectionStart","selectionEnd","navigator","userAgent","match","style","marginLeft","validity","_valueChanged","mirror","_valueForMirror","eventPath","path","target","_constrain","tokens","_tokens","slice","push","join","input","replace","split","_updateCached","_ariaLabelledBy","_ariaDescribedBy","start","end","_ariaLabelledByChanged","ariaLabelledBy","_focusableElement","_ariaDescribedByChanged","ariaDescribedBy","SPLICES_RX","LENGTH_RX","NUMBER_RX","AppStorageBehavior","data","zeroValue","sequentialTransactions","log","__initialized","__syncingToMemory","__initializingStoredValue","__transactionQueueAdvances","Promise","resolve","ready","_initializeStoredValue","saveValue","args","reset","destroy","initializeStoredValue","isNew","_getStoredValue","then","_log","_setStoredValue","syncToMemory","set","getStoredValue","storagePath","setStoredValue","memoryPathToStoragePath","storagePathToMemoryPath","operation","_group","_groupEnd","valueIsEmpty","Array","isArray","prototype","isPrototypeOf","keys","_enqueueTransaction","transaction","result","catch","error","_error","console","apply","group","groupEnd","initializingStoredValue","e","__dataChanged","change","__pathCanBeIgnored","__normalizeMemoryPath","indexSplices","__pathIsSplices","__parentPath","get","parts","parentPath","currentPath","normalizedPath","indexOf","__pathRefersToArray","__pathTailToIndex","tail","pop","window","parseInt","_onIronInputReady","nativeInput","$$","_typesThatHaveText","alwaysFloatLabel","container","_handleValueAndAutoValidate","IronA11yAnnouncer","mode","_text","instance","body","addEventListener","_onIronAnnounce","announce","async","detail"],"mappings":"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","file":"chunk.dd5d054e2e338386ee30.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronA11yAnnouncer} from '@polymer/iron-a11y-announcer/iron-a11y-announcer.js';\nimport {IronValidatableBehavior} from '@polymer/iron-validatable-behavior/iron-validatable-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`<iron-input>` is a wrapper to a native `<input>` element, that adds two-way\nbinding and prevention of invalid input. To use it, you must distribute a native\n`<input>` yourself. You can continue to use the native `input` as you would\nnormally:\n\n    <iron-input>\n      <input>\n    </iron-input>\n\n    <iron-input>\n      <input type=\"email\" disabled>\n    </iron-input>\n\n### Two-way binding\n\nBy default you can only get notified of changes to a native `<input>`'s `value`\ndue to user input:\n\n    <input value=\"{{myValue::input}}\">\n\nThis means that if you imperatively set the value (i.e. `someNativeInput.value =\n'foo'`), no events will be fired and this change cannot be observed.\n\n`iron-input` adds the `bind-value` property that mirrors the native `input`'s\n'`value` property; this property can be used for two-way data binding.\n`bind-value` will notify if it is changed either by user input or by script.\n\n    <iron-input bind-value=\"{{myValue}}\">\n      <input>\n    </iron-input>\n\nNote: this means that if you want to imperatively set the native `input`'s, you\n_must_ set `bind-value` instead, so that the wrapper `iron-input` can be\nnotified.\n\n### Validation\n\n`iron-input` uses the native `input`'s validation. For simplicity, `iron-input`\nhas a `validate()` method (which internally just checks the distributed\n`input`'s validity), which sets an `invalid` attribute that can also be used for\nstyling.\n\nTo validate automatically as you type, you can use the `auto-validate`\nattribute.\n\n`iron-input` also fires an `iron-input-validate` event after `validate()` is\ncalled. You can use it to implement a custom validator:\n\n    var CatsOnlyValidator = {\n      validate: function(ironInput) {\n        var valid = !ironInput.bindValue || ironInput.bindValue === 'cat';\n        ironInput.invalid = !valid;\n        return valid;\n      }\n    }\n    ironInput.addEventListener('iron-input-validate', function() {\n      CatsOnly.validate(input2);\n    });\n\nYou can also use an element implementing an\n[`IronValidatorBehavior`](/element/PolymerElements/iron-validatable-behavior).\nThis example can also be found in the demo for this element:\n\n    <iron-input validator=\"cats-only\">\n      <input>\n    </iron-input>\n\n### Preventing invalid input\n\nIt may be desirable to only allow users to enter certain characters. You can use\nthe `allowed-pattern` attribute to accomplish this. This feature is separate\nfrom validation, and `allowed-pattern` does not affect how the input is\nvalidated.\n\n    // Only allow typing digits, but a valid input has exactly 5 digits.\n    <iron-input allowed-pattern=\"[0-9]\">\n      <input pattern=\"\\d{5}\">\n    </iron-input>\n\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n      }\n    </style>\n    <slot id=\"content\"></slot>\n`,\n\n  is: 'iron-input',\n  behaviors: [IronValidatableBehavior],\n\n  /**\n   * Fired whenever `validate()` is called.\n   *\n   * @event iron-input-validate\n   */\n\n  properties: {\n\n    /**\n     * Use this property instead of `value` for two-way data binding, or to\n     * set a default value for the input. **Do not** use the distributed\n     * input's `value` property to set a default value.\n     */\n    bindValue: {type: String, value: ''},\n\n    /**\n     * Computed property that echoes `bindValue` (mostly used for Polymer 1.0\n     * backcompatibility, if you were one-way binding to the Polymer 1.0\n     * `input is=\"iron-input\"` value attribute).\n     */\n    value: {type: String, computed: '_computeValue(bindValue)'},\n\n    /**\n     * Regex-like list of characters allowed as input; all characters not in the\n     * list will be rejected. The recommended format should be a list of allowed\n     * characters, for example, `[a-zA-Z0-9.+-!;:]`.\n     *\n     * This pattern represents the allowed characters for the field; as the user\n     * inputs text, each individual character will be checked against the\n     * pattern (rather than checking the entire value as a whole). If a\n     * character is not a match, it will be rejected.\n     *\n     * Pasted input will have each character checked individually; if any\n     * character doesn't match `allowedPattern`, the entire pasted string will\n     * be rejected.\n     *\n     * Note: if you were using `iron-input` in 1.0, you were also required to\n     * set `prevent-invalid-input`. This is no longer needed as of Polymer 2.0,\n     * and will be set automatically for you if an `allowedPattern` is provided.\n     *\n     */\n    allowedPattern: {type: String},\n\n    /**\n     * Set to true to auto-validate the input value as you type.\n     */\n    autoValidate: {type: Boolean, value: false},\n\n    /**\n     * The native input element.\n     */\n    _inputElement: Object,\n  },\n\n  observers: ['_bindValueChanged(bindValue, _inputElement)'],\n  listeners: {'input': '_onInput', 'keypress': '_onKeypress'},\n\n  created: function() {\n    IronA11yAnnouncer.requestAvailability();\n    this._previousValidInput = '';\n    this._patternAlreadyChecked = false;\n  },\n\n  attached: function() {\n    // If the input is added at a later time, update the internal reference.\n    this._observer = dom(this).observeNodes(function(info) {\n      this._initSlottedInput();\n    }.bind(this));\n  },\n\n  detached: function() {\n    if (this._observer) {\n      dom(this).unobserveNodes(this._observer);\n      this._observer = null;\n    }\n  },\n\n  /**\n   * Returns the distributed input element.\n   */\n  get inputElement() {\n    return this._inputElement;\n  },\n\n  _initSlottedInput: function() {\n    this._inputElement = this.getEffectiveChildren()[0];\n\n    if (this.inputElement && this.inputElement.value) {\n      this.bindValue = this.inputElement.value;\n    }\n\n    this.fire('iron-input-ready');\n  },\n\n  get _patternRegExp() {\n    var pattern;\n    if (this.allowedPattern) {\n      pattern = new RegExp(this.allowedPattern);\n    } else {\n      switch (this.inputElement.type) {\n        case 'number':\n          pattern = /[0-9.,e-]/;\n          break;\n      }\n    }\n    return pattern;\n  },\n\n  /**\n   * @suppress {checkTypes}\n   */\n  _bindValueChanged: function(bindValue, inputElement) {\n    // The observer could have run before attached() when we have actually\n    // initialized this property.\n    if (!inputElement) {\n      return;\n    }\n\n    if (bindValue === undefined) {\n      inputElement.value = null;\n    } else if (bindValue !== inputElement.value) {\n      this.inputElement.value = bindValue;\n    }\n\n    if (this.autoValidate) {\n      this.validate();\n    }\n\n    // manually notify because we don't want to notify until after setting value\n    this.fire('bind-value-changed', {value: bindValue});\n  },\n\n  _onInput: function() {\n    // Need to validate each of the characters pasted if they haven't\n    // been validated inside `_onKeypress` already.\n    if (this.allowedPattern && !this._patternAlreadyChecked) {\n      var valid = this._checkPatternValidity();\n      if (!valid) {\n        this._announceInvalidCharacter(\n            'Invalid string of characters not entered.');\n        this.inputElement.value = this._previousValidInput;\n      }\n    }\n    this.bindValue = this._previousValidInput = this.inputElement.value;\n    this._patternAlreadyChecked = false;\n  },\n\n  _isPrintable: function(event) {\n    // What a control/printable character is varies wildly based on the browser.\n    // - most control characters (arrows, backspace) do not send a `keypress`\n    // event\n    //   in Chrome, but the *do* on Firefox\n    // - in Firefox, when they do send a `keypress` event, control chars have\n    //   a charCode = 0, keyCode = xx (for ex. 40 for down arrow)\n    // - printable characters always send a keypress event.\n    // - in Firefox, printable chars always have a keyCode = 0. In Chrome, the\n    // keyCode\n    //   always matches the charCode.\n    // None of this makes any sense.\n\n    // For these keys, ASCII code == browser keycode.\n    var anyNonPrintable = (event.keyCode == 8) ||  // backspace\n        (event.keyCode == 9) ||                    // tab\n        (event.keyCode == 13) ||                   // enter\n        (event.keyCode == 27);                     // escape\n\n    // For these keys, make sure it's a browser keycode and not an ASCII code.\n    var mozNonPrintable = (event.keyCode == 19) ||  // pause\n        (event.keyCode == 20) ||                    // caps lock\n        (event.keyCode == 45) ||                    // insert\n        (event.keyCode == 46) ||                    // delete\n        (event.keyCode == 144) ||                   // num lock\n        (event.keyCode == 145) ||                   // scroll lock\n        (event.keyCode > 32 &&\n         event.keyCode < 41) ||  // page up/down, end, home, arrows\n        (event.keyCode > 111 && event.keyCode < 124);  // fn keys\n\n    return !anyNonPrintable && !(event.charCode == 0 && mozNonPrintable);\n  },\n\n  _onKeypress: function(event) {\n    if (!this.allowedPattern && this.inputElement.type !== 'number') {\n      return;\n    }\n    var regexp = this._patternRegExp;\n    if (!regexp) {\n      return;\n    }\n\n    // Handle special keys and backspace\n    if (event.metaKey || event.ctrlKey || event.altKey) {\n      return;\n    }\n\n    // Check the pattern either here or in `_onInput`, but not in both.\n    this._patternAlreadyChecked = true;\n\n    var thisChar = String.fromCharCode(event.charCode);\n    if (this._isPrintable(event) && !regexp.test(thisChar)) {\n      event.preventDefault();\n      this._announceInvalidCharacter(\n          'Invalid character ' + thisChar + ' not entered.');\n    }\n  },\n\n  _checkPatternValidity: function() {\n    var regexp = this._patternRegExp;\n    if (!regexp) {\n      return true;\n    }\n    for (var i = 0; i < this.inputElement.value.length; i++) {\n      if (!regexp.test(this.inputElement.value[i])) {\n        return false;\n      }\n    }\n    return true;\n  },\n\n  /**\n   * Returns true if `value` is valid. The validator provided in `validator`\n   * will be used first, then any constraints.\n   * @return {boolean} True if the value is valid.\n   */\n  validate: function() {\n    if (!this.inputElement) {\n      this.invalid = false;\n      return true;\n    }\n\n    // Use the nested input's native validity.\n    var valid = this.inputElement.checkValidity();\n\n    // Only do extra checking if the browser thought this was valid.\n    if (valid) {\n      // Empty, required input is invalid\n      if (this.required && this.bindValue === '') {\n        valid = false;\n      } else if (this.hasValidator()) {\n        valid = IronValidatableBehavior.validate.call(this, this.bindValue);\n      }\n    }\n\n    this.invalid = !valid;\n    this.fire('iron-input-validate');\n    return valid;\n  },\n\n  _announceInvalidCharacter: function(message) {\n    this.fire('iron-announce', {text: message});\n  },\n\n  _computeValue: function(bindValue) {\n    return bindValue;\n  }\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronButtonState} from '@polymer/iron-behaviors/iron-button-state.js';\nimport {IronControlState} from '@polymer/iron-behaviors/iron-control-state.js';\n\n/*\n`PaperItemBehavior` is a convenience behavior shared by <paper-item> and\n<paper-icon-item> that manages the shared control states and attributes of\nthe items.\n*/\n/** @polymerBehavior PaperItemBehavior */\nexport const PaperItemBehaviorImpl = {\n  hostAttributes: {role: 'option', tabindex: '0'}\n};\n\n/** @polymerBehavior */\nexport const PaperItemBehavior =\n    [IronButtonState, IronControlState, PaperItemBehaviorImpl];\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport './paper-item-shared-styles.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperItemBehavior} from './paper-item-behavior.js';\n\n/**\nMaterial design:\n[Lists](https://www.google.com/design/spec/components/lists.html)\n\n`<paper-item>` is an interactive list item. By default, it is a horizontal\nflexbox.\n\n    <paper-item>Item</paper-item>\n\nUse this element with `<paper-item-body>` to make Material Design styled\ntwo-line and three-line items.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n      <iron-icon icon=\"warning\"></iron-icon>\n    </paper-item>\n\nTo use `paper-item` as a link, wrap it in an anchor tag. Since `paper-item` will\nalready receive focus, you may want to prevent the anchor tag from receiving\nfocus as well by setting its tabindex to -1.\n\n    <a href=\"https://www.polymer-project.org/\" tabindex=\"-1\">\n      <paper-item raised>Polymer Project</paper-item>\n    </a>\n\nIf you are concerned about performance and want to use `paper-item` in a\n`paper-listbox` with many items, you can just use a native `button` with the\n`paper-item` class applied (provided you have correctly included the shared\nstyles):\n\n    <style is=\"custom-style\" include=\"paper-item-shared-styles\"></style>\n\n    <paper-listbox>\n      <button class=\"paper-item\" role=\"option\">Inbox</button>\n      <button class=\"paper-item\" role=\"option\">Starred</button>\n      <button class=\"paper-item\" role=\"option\">Sent mail</button>\n    </paper-listbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-min-height` | Minimum height of the item | `48px`\n`--paper-item` | Mixin applied to the item | `{}`\n`--paper-item-selected-weight` | The font weight of a selected item | `bold`\n`--paper-item-selected` | Mixin applied to selected paper-items | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items | `--disabled-text-color`\n`--paper-item-disabled` | Mixin applied to disabled paper-items | `{}`\n`--paper-item-focused` | Mixin applied to focused paper-items | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n\n### Accessibility\n\nThis element has `role=\"listitem\"` by default. Depending on usage, it may be\nmore appropriate to set `role=\"menuitem\"`, `role=\"menuitemcheckbox\"` or\n`role=\"menuitemradio\"`.\n\n    <paper-item role=\"menuitemcheckbox\">\n      <paper-item-body>\n        Show your status\n      </paper-item-body>\n      <paper-checkbox></paper-checkbox>\n    </paper-item>\n\n@group Paper Elements\n@element paper-item\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-item-shared-styles\">\n      :host {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        @apply --paper-font-subhead;\n\n        @apply --paper-item;\n      }\n    </style>\n    <slot></slot>\n`,\n\n  is: 'paper-item',\n  behaviors: [PaperItemBehavior]\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/color.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/paper-styles/typography.js';\nconst $_documentContainer = document.createElement('template');\n$_documentContainer.setAttribute('style', 'display: none;');\n\n$_documentContainer.innerHTML = `<dom-module id=\"paper-item-shared-styles\">\n  <template>\n    <style>\n      :host, .paper-item {\n        display: block;\n        position: relative;\n        min-height: var(--paper-item-min-height, 48px);\n        padding: 0px 16px;\n      }\n\n      .paper-item {\n        @apply --paper-font-subhead;\n        border:none;\n        outline: none;\n        background: white;\n        width: 100%;\n        text-align: left;\n      }\n\n      :host([hidden]), .paper-item[hidden] {\n        display: none !important;\n      }\n\n      :host(.iron-selected), .paper-item.iron-selected {\n        font-weight: var(--paper-item-selected-weight, bold);\n\n        @apply --paper-item-selected;\n      }\n\n      :host([disabled]), .paper-item[disabled] {\n        color: var(--paper-item-disabled-color, var(--disabled-text-color));\n\n        @apply --paper-item-disabled;\n      }\n\n      :host(:focus), .paper-item:focus {\n        position: relative;\n        outline: 0;\n\n        @apply --paper-item-focused;\n      }\n\n      :host(:focus):before, .paper-item:focus:before {\n        @apply --layout-fit;\n\n        background: currentColor;\n        content: '';\n        opacity: var(--dark-divider-opacity);\n        pointer-events: none;\n\n        @apply --paper-item-focused-before;\n      }\n    </style>\n  </template>\n</dom-module>`;\n\ndocument.head.appendChild($_documentContainer.content);\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/paper-styles/typography.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/*\nUse `<paper-item-body>` in a `<paper-item>` or `<paper-icon-item>` to make two-\nor three- line items. It is a flex item that is a vertical flexbox.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n    </paper-item>\n\nThe child elements with the `secondary` attribute is given secondary text\nstyling.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-body-two-line-min-height` | Minimum height of a two-line item | `72px`\n`--paper-item-body-three-line-min-height` | Minimum height of a three-line item | `88px`\n`--paper-item-body-secondary-color` | Foreground color for the `secondary` area | `--secondary-text-color`\n`--paper-item-body-secondary` | Mixin applied to the `secondary` area | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        overflow: hidden; /* needed for text-overflow: ellipsis to work on ff */\n        @apply --layout-vertical;\n        @apply --layout-center-justified;\n        @apply --layout-flex;\n      }\n\n      :host([two-line]) {\n        min-height: var(--paper-item-body-two-line-min-height, 72px);\n      }\n\n      :host([three-line]) {\n        min-height: var(--paper-item-body-three-line-min-height, 88px);\n      }\n\n      :host > ::slotted(*) {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n\n      :host > ::slotted([secondary]) {\n        @apply --paper-font-body1;\n\n        color: var(--paper-item-body-secondary-color, var(--secondary-text-color));\n\n        @apply --paper-item-body-secondary;\n      }\n    </style>\n\n    <slot></slot>\n`,\n\n  is: 'paper-item-body'\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/typography.js';\nimport './paper-item-shared-styles.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperItemBehavior} from './paper-item-behavior.js';\n\n/*\n`<paper-icon-item>` is a convenience element to make an item with icon. It is an\ninteractive list item with a fixed-width icon area, according to Material\nDesign. This is useful if the icons are of varying widths, but you want the item\nbodies to line up. Use this like a `<paper-item>`. The child node with the slot\nname `item-icon` is placed in the icon area.\n\n    <paper-icon-item>\n      <iron-icon icon=\"favorite\" slot=\"item-icon\"></iron-icon>\n      Favorite\n    </paper-icon-item>\n    <paper-icon-item>\n      <div class=\"avatar\" slot=\"item-icon\"></div>\n      Avatar\n    </paper-icon-item>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-icon-width` | Width of the icon area | `56px`\n`--paper-item-icon` | Mixin applied to the icon area | `{}`\n`--paper-icon-item` | Mixin applied to the item | `{}`\n`--paper-item-selected-weight` | The font weight of a selected item | `bold`\n`--paper-item-selected` | Mixin applied to selected paper-items | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items | `--disabled-text-color`\n`--paper-item-disabled` | Mixin applied to disabled paper-items | `{}`\n`--paper-item-focused` | Mixin applied to focused paper-items | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-item-shared-styles\"></style>\n    <style>\n      :host {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        @apply --paper-font-subhead;\n\n        @apply --paper-item;\n        @apply --paper-icon-item;\n      }\n\n      .content-icon {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n\n        width: var(--paper-item-icon-width, 56px);\n        @apply --paper-item-icon;\n      }\n    </style>\n\n    <div id=\"contentIcon\" class=\"content-icon\">\n      <slot name=\"item-icon\"></slot>\n    </div>\n    <slot></slot>\n`,\n\n  is: 'paper-icon-item',\n  behaviors: [PaperItemBehavior]\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {IronControlState} from '@polymer/iron-behaviors/iron-control-state.js';\nimport {IronValidatableBehavior} from '@polymer/iron-validatable-behavior/iron-validatable-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`iron-autogrow-textarea` is an element containing a textarea that grows in\nheight as more lines of input are entered. Unless an explicit height or the\n`maxRows` property is set, it will never scroll.\n\nExample:\n\n    <iron-autogrow-textarea></iron-autogrow-textarea>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-autogrow-textarea` | Mixin applied to the textarea | `{}`\n`--iron-autogrow-textarea-placeholder` | Mixin applied to the textarea placeholder | `{}`\n\n@group Iron Elements\n@hero hero.svg\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        position: relative;\n        width: 400px;\n        border: 1px solid;\n        padding: 2px;\n        -moz-appearance: textarea;\n        -webkit-appearance: textarea;\n        overflow: hidden;\n      }\n\n      .mirror-text {\n        visibility: hidden;\n        word-wrap: break-word;\n        @apply --iron-autogrow-textarea;\n      }\n\n      .fit {\n        @apply --layout-fit;\n      }\n\n      textarea {\n        position: relative;\n        outline: none;\n        border: none;\n        resize: none;\n        background: inherit;\n        color: inherit;\n        /* see comments in template */\n        width: 100%;\n        height: 100%;\n        font-size: inherit;\n        font-family: inherit;\n        line-height: inherit;\n        text-align: inherit;\n        @apply --iron-autogrow-textarea;\n      }\n\n      textarea::-webkit-input-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea:-moz-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea::-moz-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea:-ms-input-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n    </style>\n\n    <!-- the mirror sizes the input/textarea so it grows with typing -->\n    <!-- use &#160; instead &nbsp; of to allow this element to be used in XHTML -->\n    <div id=\"mirror\" class=\"mirror-text\" aria-hidden=\"true\">&nbsp;</div>\n\n    <!-- size the input/textarea with a div, because the textarea has intrinsic size in ff -->\n    <div class=\"textarea-container fit\">\n      <textarea id=\"textarea\" name\\$=\"[[name]]\" aria-label\\$=\"[[label]]\" autocomplete\\$=\"[[autocomplete]]\" autofocus\\$=\"[[autofocus]]\" inputmode\\$=\"[[inputmode]]\" placeholder\\$=\"[[placeholder]]\" readonly\\$=\"[[readonly]]\" required\\$=\"[[required]]\" disabled\\$=\"[[disabled]]\" rows\\$=\"[[rows]]\" minlength\\$=\"[[minlength]]\" maxlength\\$=\"[[maxlength]]\"></textarea>\n    </div>\n`,\n\n  is: 'iron-autogrow-textarea',\n  behaviors: [IronValidatableBehavior, IronControlState],\n\n  properties: {\n    /**\n     * Use this property instead of `bind-value` for two-way data binding.\n     * @type {string|number}\n     */\n    value: {observer: '_valueChanged', type: String, notify: true},\n\n    /**\n     * This property is deprecated, and just mirrors `value`. Use `value`\n     * instead.\n     * @type {string|number}\n     */\n    bindValue: {observer: '_bindValueChanged', type: String, notify: true},\n\n    /**\n     * The initial number of rows.\n     *\n     * @attribute rows\n     * @type number\n     * @default 1\n     */\n    rows: {type: Number, value: 1, observer: '_updateCached'},\n\n    /**\n     * The maximum number of rows this element can grow to until it\n     * scrolls. 0 means no maximum.\n     *\n     * @attribute maxRows\n     * @type number\n     * @default 0\n     */\n    maxRows: {type: Number, value: 0, observer: '_updateCached'},\n\n    /**\n     * Bound to the textarea's `autocomplete` attribute.\n     */\n    autocomplete: {type: String, value: 'off'},\n\n    /**\n     * Bound to the textarea's `autofocus` attribute.\n     */\n    autofocus: {type: Boolean, value: false},\n\n    /**\n     * Bound to the textarea's `inputmode` attribute.\n     */\n    inputmode: {type: String},\n\n    /**\n     * Bound to the textarea's `placeholder` attribute.\n     */\n    placeholder: {type: String},\n\n    /**\n     * Bound to the textarea's `readonly` attribute.\n     */\n    readonly: {type: String},\n\n    /**\n     * Set to true to mark the textarea as required.\n     */\n    required: {type: Boolean},\n\n    /**\n     * The minimum length of the input value.\n     */\n    minlength: {type: Number},\n\n    /**\n     * The maximum length of the input value.\n     */\n    maxlength: {type: Number},\n\n    /**\n     * Bound to the textarea's `aria-label` attribute.\n     */\n    label: {type: String}\n\n  },\n\n  listeners: {'input': '_onInput'},\n\n  /**\n   * Returns the underlying textarea.\n   * @return {!HTMLTextAreaElement}\n   */\n  get textarea() {\n    return this.$.textarea;\n  },\n\n  /**\n   * Returns textarea's selection start.\n   * @return {number}\n   */\n  get selectionStart() {\n    return this.$.textarea.selectionStart;\n  },\n\n  /**\n   * Returns textarea's selection end.\n   * @return {number}\n   */\n  get selectionEnd() {\n    return this.$.textarea.selectionEnd;\n  },\n\n  /**\n   * Sets the textarea's selection start.\n   */\n  set selectionStart(value) {\n    this.$.textarea.selectionStart = value;\n  },\n\n  /**\n   * Sets the textarea's selection end.\n   */\n  set selectionEnd(value) {\n    this.$.textarea.selectionEnd = value;\n  },\n\n  attached: function() {\n    /* iOS has an arbitrary left margin of 3px that isn't present\n     * in any other browser, and means that the paper-textarea's cursor\n     * overlaps the label.\n     * See https://github.com/PolymerElements/paper-input/issues/468.\n     */\n    var IS_IOS = navigator.userAgent.match(/iP(?:[oa]d|hone)/);\n    if (IS_IOS) {\n      this.$.textarea.style.marginLeft = '-3px';\n    }\n  },\n\n  /**\n   * Returns true if `value` is valid. The validator provided in `validator`\n   * will be used first, if it exists; otherwise, the `textarea`'s validity\n   * is used.\n   * @return {boolean} True if the value is valid.\n   */\n  validate: function() {\n    // Use the nested input's native validity.\n    var valid = this.$.textarea.validity.valid;\n\n    // Only do extra checking if the browser thought this was valid.\n    if (valid) {\n      // Empty, required input is invalid\n      if (this.required && this.value === '') {\n        valid = false;\n      } else if (this.hasValidator()) {\n        valid = IronValidatableBehavior.validate.call(this, this.value);\n      }\n    }\n\n    this.invalid = !valid;\n    this.fire('iron-input-validate');\n    return valid;\n  },\n\n  _bindValueChanged: function(bindValue) {\n    this.value = bindValue;\n  },\n\n  _valueChanged: function(value) {\n    var textarea = this.textarea;\n    if (!textarea) {\n      return;\n    }\n\n    // If the bindValue changed manually, then we need to also update\n    // the underlying textarea's value. Otherwise this change was probably\n    // generated from the _onInput handler, and the two values are already\n    // the same.\n    if (textarea.value !== value) {\n      textarea.value = !(value || value === 0) ? '' : value;\n    }\n\n    this.bindValue = value;\n    this.$.mirror.innerHTML = this._valueForMirror();\n\n    // Manually notify because we don't want to notify until after setting\n    // value.\n    this.fire('bind-value-changed', {value: this.bindValue});\n  },\n\n  _onInput: function(event) {\n    var eventPath = dom(event).path;\n    this.value = eventPath ? eventPath[0].value : event.target.value;\n  },\n\n  _constrain: function(tokens) {\n    var _tokens;\n    tokens = tokens || [''];\n    // Enforce the min and max heights for a multiline input to avoid\n    // measurement\n    if (this.maxRows > 0 && tokens.length > this.maxRows) {\n      _tokens = tokens.slice(0, this.maxRows);\n    } else {\n      _tokens = tokens.slice(0);\n    }\n    while (this.rows > 0 && _tokens.length < this.rows) {\n      _tokens.push('');\n    }\n    // Use &#160; instead &nbsp; of to allow this element to be used in XHTML.\n    return _tokens.join('<br/>') + '&#160;';\n  },\n\n  _valueForMirror: function() {\n    var input = this.textarea;\n    if (!input) {\n      return;\n    }\n    this.tokens = (input && input.value) ? input.value.replace(/&/gm, '&amp;')\n                                               .replace(/\"/gm, '&quot;')\n                                               .replace(/'/gm, '&#39;')\n                                               .replace(/</gm, '&lt;')\n                                               .replace(/>/gm, '&gt;')\n                                               .split('\\n') :\n                                           [''];\n    return this._constrain(this.tokens);\n  },\n\n  _updateCached: function() {\n    this.$.mirror.innerHTML = this._constrain(this.tokens);\n  }\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-autogrow-textarea/iron-autogrow-textarea.js';\nimport './paper-input-char-counter.js';\nimport './paper-input-container.js';\nimport './paper-input-error.js';\n\nimport {IronFormElementBehavior} from '@polymer/iron-form-element-behavior/iron-form-element-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperInputBehavior} from './paper-input-behavior.js';\n\n/*\n`<paper-textarea>` is a multi-line text field with Material Design styling.\n\n    <paper-textarea label=\"Textarea label\"></paper-textarea>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Validation\n\nCurrently only `required` and `maxlength` validation is supported.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      label {\n        pointer-events: none;\n      }\n    </style>\n\n    <paper-input-container no-label-float$=\"[[noLabelFloat]]\" always-float-label=\"[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]\" auto-validate$=\"[[autoValidate]]\" disabled$=\"[[disabled]]\" invalid=\"[[invalid]]\">\n\n      <label hidden$=\"[[!label]]\" aria-hidden=\"true\" for$=\"[[_inputId]]\" slot=\"label\">[[label]]</label>\n\n      <iron-autogrow-textarea class=\"paper-input-input\" slot=\"input\" id$=\"[[_inputId]]\" aria-labelledby$=\"[[_ariaLabelledBy]]\" aria-describedby$=\"[[_ariaDescribedBy]]\" bind-value=\"{{value}}\" invalid=\"{{invalid}}\" validator$=\"[[validator]]\" disabled$=\"[[disabled]]\" autocomplete$=\"[[autocomplete]]\" autofocus$=\"[[autofocus]]\" inputmode$=\"[[inputmode]]\" name$=\"[[name]]\" placeholder$=\"[[placeholder]]\" readonly$=\"[[readonly]]\" required$=\"[[required]]\" minlength$=\"[[minlength]]\" maxlength$=\"[[maxlength]]\" autocapitalize$=\"[[autocapitalize]]\" rows$=\"[[rows]]\" max-rows$=\"[[maxRows]]\" on-change=\"_onChange\"></iron-autogrow-textarea>\n\n      <template is=\"dom-if\" if=\"[[errorMessage]]\">\n        <paper-input-error aria-live=\"assertive\" slot=\"add-on\">[[errorMessage]]</paper-input-error>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[charCounter]]\">\n        <paper-input-char-counter slot=\"add-on\"></paper-input-char-counter>\n      </template>\n\n    </paper-input-container>\n`,\n\n  is: 'paper-textarea',\n\n  behaviors: [\n    PaperInputBehavior,\n    IronFormElementBehavior,\n  ],\n\n  properties: {\n    _ariaLabelledBy: {\n      observer: '_ariaLabelledByChanged',\n      type: String,\n    },\n\n    _ariaDescribedBy: {\n      observer: '_ariaDescribedByChanged',\n      type: String,\n    },\n\n    value: {\n      // Required for the correct TypeScript type-generation\n      type: String,\n    },\n\n    /**\n     * The initial number of rows.\n     *\n     * @attribute rows\n     * @type {number}\n     * @default 1\n     */\n    rows: {\n      type: Number,\n      value: 1,\n    },\n\n    /**\n     * The maximum number of rows this element can grow to until it\n     * scrolls. 0 means no maximum.\n     *\n     * @attribute maxRows\n     * @type {number}\n     * @default 0\n     */\n    maxRows: {\n      type: Number,\n      value: 0,\n    },\n  },\n\n  /**\n   * @return {number}\n   */\n  get selectionStart() {\n    return this.$.input.textarea.selectionStart;\n  },\n\n  set selectionStart(start) {\n    this.$.input.textarea.selectionStart = start;\n  },\n\n  /**\n   * @return {number}\n   */\n  get selectionEnd() {\n    return this.$.input.textarea.selectionEnd;\n  },\n\n  set selectionEnd(end) {\n    this.$.input.textarea.selectionEnd = end;\n  },\n\n  _ariaLabelledByChanged: function(ariaLabelledBy) {\n    this._focusableElement.setAttribute('aria-labelledby', ariaLabelledBy);\n  },\n\n  _ariaDescribedByChanged: function(ariaDescribedBy) {\n    this._focusableElement.setAttribute('aria-describedby', ariaDescribedBy);\n  },\n\n  get _focusableElement() {\n    return this.inputElement.textarea;\n  }\n});\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nvar SPLICES_RX = /\\.splices$/;\nvar LENGTH_RX = /\\.length$/;\nvar NUMBER_RX = /\\.?#?([0-9]+)$/;\n\n/**\n * AppStorageBehavior is an abstract behavior that makes it easy to\n * synchronize in-memory data and a persistent storage system, such as\n * the browser's IndexedDB, or a remote database like Firebase.\n *\n * For examples of how to use this behavior to write your own app storage\n * elements see `<app-localstorage-document>` here, or check out\n * [polymerfire](https://github.com/Firebase/polymerfire) and\n * [app-pouchdb](https://github.com/PolymerElements/app-pouchdb).\n *\n * @polymerBehavior\n */\nexport const AppStorageBehavior = {\n  properties: {\n    /**\n     * The data to synchronize.\n     */\n    data: {\n      type: Object,\n      notify: true,\n      value: function() {\n        return this.zeroValue;\n      }\n    },\n\n    /**\n     * If this is true transactions will happen one after the other,\n     * never in parallel.\n     *\n     * Specifically, no transaction will begin until every previously\n     * enqueued transaction by this element has completed.\n     *\n     * If it is false, new transactions will be executed as they are\n     * received.\n     */\n    sequentialTransactions: {type: Boolean, value: false},\n\n    /**\n     * When true, will perform detailed logging.\n     */\n    log: {type: Boolean, value: false}\n  },\n\n  observers: ['__dataChanged(data.*)'],\n\n  created: function() {\n    this.__initialized = false;\n    this.__syncingToMemory = false;\n    this.__initializingStoredValue = null;\n    this.__transactionQueueAdvances = Promise.resolve();\n  },\n\n  ready: function() {\n    this._initializeStoredValue();\n  },\n\n  /**\n   * Override this getter to return true if the value has never been\n   * persisted to storage.\n   *\n   * @return {boolean}\n   */\n  get isNew() {\n    return true;\n  },\n\n  /**\n   * A promise that will resolve once all queued transactions\n   * have completed.\n   *\n   * This field is updated as new transactions are enqueued, so it will\n   * only wait for transactions which were enqueued when the field\n   * was accessed.\n   *\n   * This promise never rejects.\n   *\n   * @return {Promise}\n   */\n  get transactionsComplete() {\n    return this.__transactionQueueAdvances;\n  },\n\n  /**\n   * Override this getter to define the default value to use when\n   * there's no data stored.\n   *\n   * @return {*}\n   */\n  get zeroValue() {\n    return undefined;\n  },\n\n  /**\n   * Override this method.\n   *\n   * If the data value represented by this storage instance is new, this\n   * method generates an attempt to write the value to storage.\n   *\n   *\n   * @param {*} args\n   * @return {Promise} a Promise that settles only once the write has.\n   */\n  saveValue: function(args) {\n    return Promise.resolve();\n  },\n\n  /**\n   * Optional. Override this method to clear out the mapping of this\n   * storage object and a logical location within storage.\n   *\n   * If this method is supported, after it's called, isNew() should be\n   * true.\n   */\n  reset: function() {},\n\n  /**\n   * Remove the data from storage.\n   *\n   * @return {Promise} A promise that settles once the destruction is\n   *   complete.\n   */\n  destroy: function() {\n    this.data = this.zeroValue;\n    return this.saveValue();\n  },\n\n  /**\n   * Perform the initial sync between storage and memory. This method\n   * is called automatically while the element is being initialized.\n   * Implementations may override it.\n   *\n   * If an implementation intends to call this method, it should instead\n   * call _initializeStoredValue, which provides reentrancy protection.\n   *\n   * @return {Promise} A promise that settles once this process is\n   *     complete.\n   */\n  initializeStoredValue: function() {\n    if (this.isNew) {\n      return Promise.resolve();\n    }\n\n    // If this is not a \"new\" model, then we should attempt\n    // to read an initial value from storage:\n    return this._getStoredValue('data').then(function(data) {\n      this._log('Got stored value!', data, this.data);\n      if (data == null) {\n        return this._setStoredValue('data', this.data || this.zeroValue);\n      } else {\n        this.syncToMemory(function() {\n          this.set('data', data);\n        });\n      }\n    }.bind(this));\n  },\n\n  /**\n   * Override this method to implement reading a value from storage.\n   *\n   *\n   * @param {string} storagePath The path (through storage) of the value to\n   *   create, relative to the root of storage associated with this instance.\n   * @return {Promise} A promise that resolves with the canonical value stored\n   *   at the provided path when the transaction has completed. _If there is no\n   *   such value at the provided path through storage, then the promise will\n   *   resolve to `undefined`._ The promise will be rejected if the transaction\n   *   fails for any reason.\n   */\n  getStoredValue: function(storagePath) {\n    return Promise.resolve();\n  },\n\n  /**\n   * Override this method to implement creating and updating\n   * stored values.\n   *\n   *\n   * @param {string} storagePath The path of the value to update, relative\n   *   to the root storage path configured for this instance.\n   * @param {*} value The updated in-memory value to apply to the stored value\n   *   at the provided path.\n   * @return {Promise} A promise that resolves with the canonical value stored\n   *   at the provided path when the transaction has completed. The promise\n   *   will be rejected if the transaction fails for any reason.\n   */\n  setStoredValue: function(storagePath, value) {\n    return Promise.resolve(value);\n  },\n\n  /**\n   * Maps a Polymer databinding path to the corresponding path in the\n   * storage system. Override to define a custom mapping.\n   *\n   * The inverse of storagePathToMemoryPath.\n   *\n   * @param {string} path An in-memory path through a storage object.\n   * @return {string} The provided path mapped to the equivalent location in\n   *   storage. This mapped version of the path is suitable for use with the\n   *   CRUD operations on both memory and storage.\n   */\n  memoryPathToStoragePath: function(path) {\n    return path;\n  },\n\n  /**\n   * Maps a storage path to the corresponding Polymer databinding path.\n   * Override to define a custom mapping.\n   *\n   * The inverse of memoryPathToStoragePath.\n   *\n   * @param {string} path The storage path through a storage object.\n   * @return {string} The provided path through storage mapped to the\n   *   equivalent Polymer path through the in-memory representation of storage.\n   */\n  storagePathToMemoryPath: function(path) {\n    return path;\n  },\n\n  /**\n   * Enables performing transformations on the in-memory representation of\n   * storage without activating observers that will cause those\n   * transformations to be re-applied to the storage backend. This is useful\n   * for preventing redundant (or cyclical) application of transformations.\n   *\n   * @param {Function} operation A function that will perform the desired\n   *   transformation. It will be called synchronously, when it is safe to\n   *   apply the transformation.\n   */\n  syncToMemory: function(operation) {\n    if (this.__syncingToMemory) {\n      return;\n    }\n\n    this._group('Sync to memory.');\n\n    this.__syncingToMemory = true;\n    operation.call(this);\n    this.__syncingToMemory = false;\n\n    this._groupEnd('Sync to memory.');\n  },\n\n  /**\n   * A convenience method. Returns true iff value is null, undefined,\n   * an empty array, or an object with no keys.\n   */\n  valueIsEmpty: function(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else if (Object.prototype.isPrototypeOf(value)) {\n      return Object.keys(value).length === 0;\n    } else {\n      return value == null;\n    }\n  },\n\n  /**\n   * Like `getStoredValue` but called with a Polymer path rather than\n   * a storage path.\n   *\n   * @param {string} path The Polymer path to get.\n   * @return {Promise} A Promise of the value stored at that path.\n   */\n  _getStoredValue: function(path) {\n    return this.getStoredValue(this.memoryPathToStoragePath(path));\n  },\n\n  /**\n   * Like `setStoredValue` but called with a Polymer path rather than\n   * a storage path.\n   *\n   * @param {string} path The Polymer path to update.\n   * @param {*} value The updated in-memory value to apply to the stored value\n   *   at the provided path.\n   * @return {Promise} A promise that resolves with the canonical value stored\n   *   at the provided path when the transaction has completed. The promise\n   *   will be rejected if the transaction fails for any reason.\n   */\n  _setStoredValue: function(path, value) {\n    return this.setStoredValue(this.memoryPathToStoragePath(path), value);\n  },\n\n  /**\n   * Enqueues the given function in the transaction queue.\n   *\n   * The transaction queue allows for optional parallelism/sequentiality\n   * via the `sequentialTransactions` boolean property, as well as giving\n   * the user a convenient way to wait for all pending transactions to\n   * finish.\n   *\n   * The given function may be called immediately or after an arbitrary\n   * delay. Its `this` context will be bound to the element.\n   *\n   * If the transaction performs any asynchronous operations it must\n   * return a promise.\n   *\n   * @param {Function} transaction A function implementing the transaction.\n   * @return {Promise} A promise that resolves once the transaction has\n   *   finished. This promise will never reject.\n   */\n  _enqueueTransaction: function(transaction) {\n    if (this.sequentialTransactions) {\n      transaction = transaction.bind(this);\n    } else {\n      var result = transaction.call(this);\n      transaction = function() {\n        return result;\n      };\n    }\n\n    return this.__transactionQueueAdvances =\n               this.__transactionQueueAdvances.then(transaction)\n                   .catch(function(error) {\n                     this._error('Error performing queued transaction.', error);\n                   }.bind(this));\n  },\n\n  /**\n   * A wrapper around `console.log`.\n   */\n  _log: function(...args) {\n    if (this.log) {\n      console.log.apply(console, args);\n    }\n  },\n\n  /**\n   * A wrapper around `console.error`.\n   */\n  _error: function(...args) {\n    if (this.log) {\n      console.error.apply(console, args);\n    }\n  },\n\n  /**\n   * A wrapper around `console.group`.\n   */\n  _group: function(...args) {\n    if (this.log) {\n      console.group.apply(console, args);\n    }\n  },\n\n  /**\n   * A wrapper around `console.groupEnd`.\n   */\n  _groupEnd: function(...args) {\n    if (this.log) {\n      console.groupEnd.apply(console, args);\n    }\n  },\n\n  /**\n   * A reentrancy-save wrapper around `this.initializeStoredValue`.\n   * Prefer calling this method over that one.\n   *\n   * @return {Promise} The result of calling `initializeStoredValue`,\n   *   or `undefined` if called while initializing.\n   */\n  _initializeStoredValue: function() {\n    if (this.__initializingStoredValue) {\n      return;\n    }\n\n    this._group('Initializing stored value.');\n\n    var initializingStoredValue = this.__initializingStoredValue =\n        this.initializeStoredValue()\n            .then(function() {\n              this.__initialized = true;\n              this.__initializingStoredValue = null;\n              this._groupEnd('Initializing stored value.');\n            }.bind(this))\n            .catch(function(e) {\n              this.__initializingStoredValue = null;\n              this._groupEnd('Initializing stored value.');\n            }.bind(this));\n\n    return this._enqueueTransaction(function() {\n      return initializingStoredValue;\n    });\n  },\n\n  __dataChanged: function(change) {\n    if (this.isNew || this.__syncingToMemory || !this.__initialized ||\n        this.__pathCanBeIgnored(change.path)) {\n      return;\n    }\n\n    var path = this.__normalizeMemoryPath(change.path);\n    var value = change.value;\n    var indexSplices = value && value.indexSplices;\n\n    this._enqueueTransaction(function() {\n      this._log('Setting', path + ':', indexSplices || value);\n\n      if (indexSplices && this.__pathIsSplices(path)) {\n        path = this.__parentPath(path);\n        value = this.get(path);\n      }\n\n      return this._setStoredValue(path, value);\n    });\n  },\n\n  __normalizeMemoryPath: function(path) {\n    var parts = path.split('.');\n    var parentPath = [];\n    var currentPath = [];\n    var normalizedPath = [];\n    var index;\n\n    for (var i = 0; i < parts.length; ++i) {\n      currentPath.push(parts[i]);\n      if (/^#/.test(parts[i])) {\n        normalizedPath.push(\n            this.get(parentPath).indexOf(this.get(currentPath)));\n      } else {\n        normalizedPath.push(parts[i]);\n      }\n      parentPath.push(parts[i]);\n    }\n\n    return normalizedPath.join('.');\n  },\n\n  __parentPath: function(path) {\n    var parentPath = path.split('.');\n    return parentPath.slice(0, parentPath.length - 1).join('.');\n  },\n\n  __pathCanBeIgnored: function(path) {\n    return LENGTH_RX.test(path) &&\n        Array.isArray(this.get(this.__parentPath(path)));\n  },\n\n  __pathIsSplices: function(path) {\n    return SPLICES_RX.test(path) &&\n        Array.isArray(this.get(this.__parentPath(path)));\n  },\n\n  __pathRefersToArray: function(path) {\n    return (SPLICES_RX.test(path) || LENGTH_RX.test(path)) &&\n        Array.isArray(this.get(this.__parentPath(path)));\n  },\n\n  __pathTailToIndex: function(path) {\n    var tail = path.split('.').pop();\n    return window.parseInt(tail.replace(NUMBER_RX, '$1'), 10);\n  }\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-input/iron-input.js';\nimport './paper-input-char-counter.js';\nimport './paper-input-container.js';\nimport './paper-input-error.js';\n\nimport {IronFormElementBehavior} from '@polymer/iron-form-element-behavior/iron-form-element-behavior.js';\nimport {DomModule} from '@polymer/polymer/lib/elements/dom-module.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {PaperInputBehavior} from './paper-input-behavior.js';\n\n/**\nMaterial design: [Text\nfields](https://www.google.com/design/spec/components/text-fields.html)\n\n`<paper-input>` is a single-line text field with Material Design styling.\n\n    <paper-input label=\"Input label\"></paper-input>\n\nIt may include an optional error message or character counter.\n\n    <paper-input error-message=\"Invalid input!\" label=\"Input\n    label\"></paper-input> <paper-input char-counter label=\"Input\n    label\"></paper-input>\n\nIt can also include custom prefix or suffix elements, which are displayed\nbefore or after the text input itself. In order for an element to be\nconsidered as a prefix, it must have the `prefix` attribute (and similarly\nfor `suffix`).\n\n    <paper-input label=\"total\">\n      <div prefix>$</div>\n      <paper-icon-button slot=\"suffix\" icon=\"clear\"></paper-icon-button>\n    </paper-input>\n\nA `paper-input` can use the native `type=search` or `type=file` features.\nHowever, since we can't control the native styling of the input (search icon,\nfile button, date placeholder, etc.), in these cases the label will be\nautomatically floated. The `placeholder` attribute can still be used for\nadditional informational text.\n\n    <paper-input label=\"search!\" type=\"search\"\n        placeholder=\"search for cats\" autosave=\"test\" results=\"5\">\n    </paper-input>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Focus\n\nTo focus a paper-input, you can call the native `focus()` method as long as the\npaper input has a tab index. Similarly, `blur()` will blur the element.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-ms-clear` | Mixin applied to the Internet Explorer reveal button (the eyeball) | {}\n\n@group Paper Elements\n@element paper-input\n@hero hero.svg\n@demo demo/index.html\n*/\nPolymer({\n  is: 'paper-input',\n\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n\n      :host([focused]) {\n        outline: none;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      input {\n        /* Firefox sets a min-width on the input, which can cause layout issues */\n        min-width: 0;\n      }\n\n      /* In 1.x, the <input> is distributed to paper-input-container, which styles it.\n      In 2.x the <iron-input> is distributed to paper-input-container, which styles\n      it, but in order for this to work correctly, we need to reset some\n      of the native input's properties to inherit (from the iron-input) */\n      iron-input > input {\n        @apply --paper-input-container-shared-input-style;\n        font-family: inherit;\n        font-weight: inherit;\n        font-size: inherit;\n        letter-spacing: inherit;\n        word-spacing: inherit;\n        line-height: inherit;\n        text-shadow: inherit;\n        color: inherit;\n        cursor: inherit;\n      }\n\n      input:disabled {\n        @apply --paper-input-container-input-disabled;\n      }\n\n      input::-webkit-outer-spin-button,\n      input::-webkit-inner-spin-button {\n        @apply --paper-input-container-input-webkit-spinner;\n      }\n\n      input::-webkit-clear-button {\n        @apply --paper-input-container-input-webkit-clear;\n      }\n\n      input::-webkit-calendar-picker-indicator {\n        @apply --paper-input-container-input-webkit-calendar-picker-indicator;\n      }\n\n      input::-webkit-input-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input:-moz-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input::-moz-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input::-ms-clear {\n        @apply --paper-input-container-ms-clear;\n      }\n\n      input::-ms-reveal {\n        @apply --paper-input-container-ms-reveal;\n      }\n\n      input:-ms-input-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      label {\n        pointer-events: none;\n      }\n    </style>\n\n    <paper-input-container id=\"container\" no-label-float=\"[[noLabelFloat]]\" always-float-label=\"[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]\" auto-validate$=\"[[autoValidate]]\" disabled$=\"[[disabled]]\" invalid=\"[[invalid]]\">\n\n      <slot name=\"prefix\" slot=\"prefix\"></slot>\n\n      <label hidden$=\"[[!label]]\" aria-hidden=\"true\" for$=\"[[_inputId]]\" slot=\"label\">[[label]]</label>\n\n      <!-- Need to bind maxlength so that the paper-input-char-counter works correctly -->\n      <iron-input bind-value=\"{{value}}\" slot=\"input\" class=\"input-element\" id$=\"[[_inputId]]\" maxlength$=\"[[maxlength]]\" allowed-pattern=\"[[allowedPattern]]\" invalid=\"{{invalid}}\" validator=\"[[validator]]\">\n        <input aria-labelledby$=\"[[_ariaLabelledBy]]\" aria-describedby$=\"[[_ariaDescribedBy]]\" disabled$=\"[[disabled]]\" title$=\"[[title]]\" type$=\"[[type]]\" pattern$=\"[[pattern]]\" required$=\"[[required]]\" autocomplete$=\"[[autocomplete]]\" autofocus$=\"[[autofocus]]\" inputmode$=\"[[inputmode]]\" minlength$=\"[[minlength]]\" maxlength$=\"[[maxlength]]\" min$=\"[[min]]\" max$=\"[[max]]\" step$=\"[[step]]\" name$=\"[[name]]\" placeholder$=\"[[placeholder]]\" readonly$=\"[[readonly]]\" list$=\"[[list]]\" size$=\"[[size]]\" autocapitalize$=\"[[autocapitalize]]\" autocorrect$=\"[[autocorrect]]\" on-change=\"_onChange\" tabindex$=\"[[tabIndex]]\" autosave$=\"[[autosave]]\" results$=\"[[results]]\" accept$=\"[[accept]]\" multiple$=\"[[multiple]]\">\n      </iron-input>\n\n      <slot name=\"suffix\" slot=\"suffix\"></slot>\n\n      <template is=\"dom-if\" if=\"[[errorMessage]]\">\n        <paper-input-error aria-live=\"assertive\" slot=\"add-on\">[[errorMessage]]</paper-input-error>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[charCounter]]\">\n        <paper-input-char-counter slot=\"add-on\"></paper-input-char-counter>\n      </template>\n\n    </paper-input-container>\n  `,\n\n  behaviors: [PaperInputBehavior, IronFormElementBehavior],\n\n  properties: {\n    value: {\n      // Required for the correct TypeScript type-generation\n      type: String\n    }\n  },\n\n  /**\n   * Returns a reference to the focusable element. Overridden from\n   * PaperInputBehavior to correctly focus the native input.\n   *\n   * @return {!HTMLElement}\n   */\n  get _focusableElement() {\n    return this.inputElement._inputElement;\n  },\n\n  // Note: This event is only available in the 1.0 version of this element.\n  // In 2.0, the functionality of `_onIronInputReady` is done in\n  // PaperInputBehavior::attached.\n  listeners: {'iron-input-ready': '_onIronInputReady'},\n\n  _onIronInputReady: function() {\n    // Even though this is only used in the next line, save this for\n    // backwards compatibility, since the native input had this ID until 2.0.5.\n    if (!this.$.nativeInput) {\n      this.$.nativeInput = this.$$('input');\n    }\n    if (this.inputElement &&\n        this._typesThatHaveText.indexOf(this.$.nativeInput.type) !== -1) {\n      this.alwaysFloatLabel = true;\n    }\n\n    // Only validate when attached if the input already has a value.\n    if (!!this.inputElement.bindValue) {\n      this.$.container._handleValueAndAutoValidate(this.inputElement);\n    }\n  },\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`iron-a11y-announcer` is a singleton element that is intended to add a11y\nto features that require on-demand announcement from screen readers. In\norder to make use of the announcer, it is best to request its availability\nin the announcing element.\n\nExample:\n\n    Polymer({\n\n      is: 'x-chatty',\n\n      attached: function() {\n        // This will create the singleton element if it has not\n        // been created yet:\n        Polymer.IronA11yAnnouncer.requestAvailability();\n      }\n    });\n\nAfter the `iron-a11y-announcer` has been made available, elements can\nmake announces by firing bubbling `iron-announce` events.\n\nExample:\n\n    this.fire('iron-announce', {\n      text: 'This is an announcement!'\n    }, { bubbles: true });\n\nNote: announcements are only audible if you have a screen reader enabled.\n\n@group Iron Elements\n@demo demo/index.html\n*/\nexport const IronA11yAnnouncer = Polymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        position: fixed;\n        clip: rect(0px,0px,0px,0px);\n      }\n    </style>\n    <div aria-live$=\"[[mode]]\">[[_text]]</div>\n`,\n\n  is: 'iron-a11y-announcer',\n\n  properties: {\n\n    /**\n     * The value of mode is used to set the `aria-live` attribute\n     * for the element that will be announced. Valid values are: `off`,\n     * `polite` and `assertive`.\n     */\n    mode: {type: String, value: 'polite'},\n\n    _text: {type: String, value: ''}\n  },\n\n  created: function() {\n    if (!IronA11yAnnouncer.instance) {\n      IronA11yAnnouncer.instance = this;\n    }\n\n    document.body.addEventListener(\n        'iron-announce', this._onIronAnnounce.bind(this));\n  },\n\n  /**\n   * Cause a text string to be announced by screen readers.\n   *\n   * @param {string} text The text that should be announced.\n   */\n  announce: function(text) {\n    this._text = '';\n    this.async(function() {\n      this._text = text;\n    }, 100);\n  },\n\n  _onIronAnnounce: function(event) {\n    if (event.detail && event.detail.text) {\n      this.announce(event.detail.text);\n    }\n  }\n});\n\nIronA11yAnnouncer.instance = null;\n\nIronA11yAnnouncer.requestAvailability = function() {\n  if (!IronA11yAnnouncer.instance) {\n    IronA11yAnnouncer.instance = document.createElement('iron-a11y-announcer');\n  }\n\n  document.body.appendChild(IronA11yAnnouncer.instance);\n};\n"],"sourceRoot":""}