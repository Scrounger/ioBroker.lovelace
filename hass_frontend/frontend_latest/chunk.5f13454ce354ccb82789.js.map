{"version":3,"sources":["webpack:///./src/components/entity/ha-entity-picker.ts","webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/panels/lovelace/editor/config-elements/config-elements-style.ts","webpack:///./src/panels/lovelace/components/hui-theme-select-editor.ts","webpack:///./src/panels/lovelace/editor/config-elements/hui-thermostat-card-editor.ts"],"names":["rowRenderer","root","_owner","model","firstElementChild","innerHTML","querySelector","stateObj","item","textContent","entity_id","HaEntityPicker","_getStates","hass","domainFilter","entityFilter","states","entityIds","Object","keys","filter","eid","substr","indexOf","sort","map","key","this","value","changedProps","super","updated","has","_opened","_hass","_value","allowCustomEntity","_openedChanged","_valueChanged","autofocus","undefined","label","localize","disabled","length","ev","detail","setTimeout","type","Boolean","attribute","customElements","define","struct","types","includes","icon","configElementStyle","HuiThemeSelectEditor","themes","concat","_changed","theme","target","cardConfigStruct","entity","name","HuiThermostatCardEditor","config","_config","_name","_entity","_theme","configValue"],"mappings":"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","file":"chunk.5f13454ce354ccb82789.js","sourcesContent":["import \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@vaadin/vaadin-combo-box/vaadin-combo-box-light\";\nimport memoizeOne from \"memoize-one\";\n\nimport \"./state-badge\";\n\nimport computeStateName from \"../../common/entity/compute_state_name\";\nimport {\n  LitElement,\n  TemplateResult,\n  html,\n  css,\n  CSSResult,\n  property,\n  PropertyValues,\n} from \"lit-element\";\nimport { HomeAssistant } from \"../../types\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\n\nexport type HaEntityPickerEntityFilterFunc = (entityId: HassEntity) => boolean;\n\nconst rowRenderer = (\n  root: HTMLElement,\n  _owner,\n  model: { item: HassEntity }\n) => {\n  if (!root.firstElementChild) {\n    root.innerHTML = `\n      <style>\n        paper-icon-item {\n          margin: -10px;\n          padding: 0;\n        }\n      </style>\n      <paper-icon-item>\n        <state-badge state-obj=\"[[item]]\" slot=\"item-icon\"></state-badge>\n        <paper-item-body two-line=\"\">\n          <div class='name'>[[_computeStateName(item)]]</div>\n          <div secondary>[[item.entity_id]]</div>\n        </paper-item-body>\n      </paper-icon-item>\n    `;\n  }\n\n  root.querySelector(\"state-badge\")!.stateObj = model.item;\n  root.querySelector(\".name\")!.textContent = computeStateName(model.item);\n  root.querySelector(\"[secondary]\")!.textContent = model.item.entity_id;\n};\n\nclass HaEntityPicker extends LitElement {\n  @property({ type: Boolean }) public autofocus?: boolean;\n  @property({ type: Boolean }) public disabled?: boolean;\n  @property({ type: Boolean, attribute: \"allow-custom-entity\" })\n  public allowCustomEntity;\n  @property() public hass?: HomeAssistant;\n  @property() public label?: string;\n  @property() public value?: string;\n  @property({ attribute: \"domain-filter\" }) public domainFilter?: string;\n  @property() public entityFilter?: HaEntityPickerEntityFilterFunc;\n  @property({ type: Boolean }) private _opened?: boolean;\n  @property() private _hass?: HomeAssistant;\n\n  private _getStates = memoizeOne(\n    (\n      hass: this[\"hass\"],\n      domainFilter: this[\"domainFilter\"],\n      entityFilter: this[\"entityFilter\"]\n    ) => {\n      let states: HassEntity[] = [];\n\n      if (!hass) {\n        return [];\n      }\n      let entityIds = Object.keys(hass.states);\n\n      if (domainFilter) {\n        entityIds = entityIds.filter(\n          (eid) => eid.substr(0, eid.indexOf(\".\")) === domainFilter\n        );\n      }\n\n      states = entityIds.sort().map((key) => hass!.states[key]);\n\n      if (entityFilter) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value || entityFilter!(stateObj)\n        );\n      }\n      return states;\n    }\n  );\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"hass\") && !this._opened) {\n      this._hass = this.hass;\n    }\n  }\n\n  protected render(): TemplateResult | void {\n    const states = this._getStates(\n      this._hass,\n      this.domainFilter,\n      this.entityFilter\n    );\n\n    return html`\n      <vaadin-combo-box-light\n        item-value-path=\"entity_id\"\n        item-label-path=\"entity_id\"\n        .items=${states}\n        .value=${this._value}\n        .allowCustomValue=${this.allowCustomEntity}\n        .renderer=${rowRenderer}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n      >\n        <paper-input\n          .autofocus=${this.autofocus}\n          .label=${this.label === undefined && this._hass\n            ? this._hass.localize(\"ui.components.entity.entity-picker.entity\")\n            : this.label}\n          .value=${this._value}\n          .disabled=${this.disabled}\n          class=\"input\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          spellcheck=\"false\"\n        >\n          ${this.value\n            ? html`\n                <paper-icon-button\n                  aria-label=\"Clear\"\n                  slot=\"suffix\"\n                  class=\"clear-button\"\n                  icon=\"hass:close\"\n                  no-ripple\n                >\n                  Clear\n                </paper-icon-button>\n              `\n            : \"\"}\n          ${states.length > 0\n            ? html`\n                <paper-icon-button\n                  aria-label=\"Show entities\"\n                  slot=\"suffix\"\n                  class=\"toggle-button\"\n                  .icon=${this._opened ? \"hass:menu-up\" : \"hass:menu-down\"}\n                >\n                  Toggle\n                </paper-icon-button>\n              `\n            : \"\"}\n        </paper-input>\n      </vaadin-combo-box-light>\n    `;\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    const newValue = ev.detail.value;\n    if (newValue !== this._value) {\n      this.value = ev.detail.value;\n      setTimeout(() => {\n        fireEvent(this, \"value-changed\", { value: this.value });\n        fireEvent(this, \"change\");\n      }, 0);\n    }\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-input > paper-icon-button {\n        width: 24px;\n        height: 24px;\n        padding: 2px;\n        color: var(--secondary-text-color);\n      }\n      [hidden] {\n        display: none;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"ha-entity-picker\", HaEntityPicker);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entity-picker\": HaEntityPicker;\n  }\n}\n","import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","import { html } from \"lit-element\";\n\nexport const configElementStyle = html`\n  <style>\n    paper-toggle-button {\n      padding-top: 16px;\n    }\n    .side-by-side {\n      display: flex;\n    }\n    .side-by-side > * {\n      flex: 1;\n      padding-right: 4px;\n    }\n    .suffix {\n      margin: 0 8px;\n    }\n  </style>\n`;\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n  css,\n  CSSResult,\n} from \"lit-element\";\nimport \"@material/mwc-button\";\n\nimport { HomeAssistant } from \"../../../types\";\nimport { fireEvent, HASSDomEvent } from \"../../../common/dom/fire_event\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"theme-changed\": undefined;\n  }\n  // for add event listener\n  interface HTMLElementEventMap {\n    \"theme-changed\": HASSDomEvent<undefined>;\n  }\n}\n\n@customElement(\"hui-theme-select-editor\")\nexport class HuiThemeSelectEditor extends LitElement {\n  @property() public value?: string;\n\n  @property() public hass?: HomeAssistant;\n\n  protected render(): TemplateResult | void {\n    const themes = [\"Backend-selected\", \"default\"].concat(\n      Object.keys(this.hass!.themes.themes).sort()\n    );\n\n    return html`\n      <paper-dropdown-menu\n        label=\"Theme\"\n        dynamic-align\n        @value-changed=\"${this._changed}\"\n      >\n        <paper-listbox\n          slot=\"dropdown-content\"\n          .selected=\"${this.value}\"\n          attr-for-selected=\"theme\"\n        >\n          ${themes.map((theme) => {\n            return html`\n              <paper-item theme=\"${theme}\">${theme}</paper-item>\n            `;\n          })}\n        </paper-listbox>\n      </paper-dropdown-menu>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-dropdown-menu {\n        width: 100%;\n      }\n    `;\n  }\n\n  private _changed(ev): void {\n    if (!this.hass || ev.target.value === \"\") {\n      return;\n    }\n    this.value = ev.target.value;\n    fireEvent(this, \"theme-changed\");\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-theme-select-editor\": HuiThemeSelectEditor;\n  }\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-input/paper-input\";\n\nimport \"../../components/hui-theme-select-editor\";\nimport \"../../../../components/entity/ha-entity-picker\";\n\nimport { struct } from \"../../common/structs/struct\";\nimport { EntitiesEditorEvent, EditorTarget } from \"../types\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport { ThermostatCardConfig } from \"../../cards/types\";\n\nconst cardConfigStruct = struct({\n  type: \"string\",\n  entity: \"string\",\n  name: \"string?\",\n  theme: \"string?\",\n});\n\n@customElement(\"hui-thermostat-card-editor\")\nexport class HuiThermostatCardEditor extends LitElement\n  implements LovelaceCardEditor {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: ThermostatCardConfig;\n\n  public setConfig(config: ThermostatCardConfig): void {\n    config = cardConfigStruct(config);\n    this._config = config;\n  }\n\n  get _entity(): string {\n    return this._config!.entity || \"\";\n  }\n\n  get _name(): string {\n    return this._config!.name || \"\";\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"default\";\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      ${configElementStyle}\n      <div class=\"card-config\">\n        <paper-input\n          label=\"Name\"\n          .value=\"${this._name}\"\n          .configValue=\"${\"name\"}\"\n          @value-changed=\"${this._valueChanged}\"\n        ></paper-input>\n        <div class=\"side-by-side\">\n          <ha-entity-picker\n            .hass=\"${this.hass}\"\n            .value=\"${this._entity}\"\n            .configValue=${\"entity\"}\n            domain-filter=\"climate\"\n            @change=\"${this._valueChanged}\"\n            allow-custom-entity\n          ></ha-entity-picker>\n          <hui-theme-select-editor\n            .hass=\"${this.hass}\"\n            .value=\"${this._theme}\"\n            .configValue=\"${\"theme\"}\"\n            @theme-changed=\"${this._valueChanged}\"\n          ></hui-theme-select-editor>\n        </div>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n\n    if (this[`_${target.configValue}`] === target.value) {\n      return;\n    }\n    if (target.configValue) {\n      if (target.value === \"\") {\n        delete this._config[target.configValue!];\n      } else {\n        this._config = { ...this._config, [target.configValue!]: target.value };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-thermostat-card-editor\": HuiThermostatCardEditor;\n  }\n}\n"],"sourceRoot":""}